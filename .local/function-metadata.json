{
  "code-review-fixes": {
    "src/mcp_vacuum/__main__.py": [
      {
        "name": "cli",
        "signature": {
          "args": [
            {
              "name": "ctx",
              "type": "click.Context"
            },
            {
              "name": "config_file",
              "type": "str | None"
            },
            {
              "name": "log_level",
              "type": "str | None"
            },
            {
              "name": "log_format",
              "type": "str | None"
            }
          ],
          "return_type": "None"
        },
        "docstring": "MCP Vacuum - Discovers MCP servers, authenticates, and converts schemas.",
        "dependencies": []
      },
      {
        "name": "discover",
        "signature": {
          "args": [
            {
              "name": "ctx",
              "type": "click.Context"
            },
            {
              "name": "networks",
              "type": "list[str]"
            },
            {
              "name": "output_file",
              "type": "str | None"
            }
          ],
          "return_type": "None"
        },
        "docstring": "Discovers MCP servers, authenticates, and generates Kagent schemas.",
        "dependencies": []
      },
      {
        "name": "version",
        "signature": {
          "args": [
            {
              "name": "ctx",
              "type": "click.Context"
            }
          ],
          "return_type": "None"
        },
        "docstring": "Show version information.",
        "dependencies": []
      },
      {
        "name": "config_show",
        "signature": {
          "args": [
            {
              "name": "ctx",
              "type": "click.Context"
            }
          ],
          "return_type": "None"
        },
        "docstring": "Show current configuration.",
        "dependencies": []
      }
    ],
    "src/mcp_vacuum/adk/auth_agent.py": [
      {
        "name": "__init__",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": "server_id",
              "type": "str"
            },
            {
              "name": "success",
              "type": "bool"
            },
            {
              "name": "auth_data",
              "type": "dict[str, Any] | None"
            },
            {
              "name": "error_message",
              "type": "str | None"
            }
          ],
          "return_type": null
        },
        "docstring": null,
        "dependencies": []
      },
      {
        "name": "__repr__",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": null
        },
        "docstring": null,
        "dependencies": []
      },
      {
        "name": "__init__",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": "app_config",
              "type": "Config"
            },
            {
              "name": "parent_logger",
              "type": "structlog.BoundLogger"
            },
            {
              "name": "output_queue",
              "type": "asyncio.Queue"
            }
          ],
          "return_type": null
        },
        "docstring": null,
        "dependencies": []
      }
    ],
    "src/mcp_vacuum/adk/base.py": [
      {
        "name": "__init__",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": "agent_name",
              "type": "str"
            },
            {
              "name": "app_config",
              "type": "Config"
            },
            {
              "name": "parent_logger",
              "type": "structlog.BoundLogger | None"
            }
          ],
          "return_type": null
        },
        "docstring": "Args:\n    agent_name: A unique name for this agent instance.\n    app_config: The global application configuration.\n    parent_logger: Optional logger from a parent agent for hierarchical\n                   logging.\n    **kwargs: Additional arguments for the underlying ADK BaseAgent.",
        "dependencies": []
      }
    ],
    "src/mcp_vacuum/adk/conversion_agent.py": [
      {
        "name": "__init__",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": "server_id",
              "type": "str"
            },
            {
              "name": "success",
              "type": "bool"
            },
            {
              "name": "kagent_tools_schemas",
              "type": "list[KagentTool] | None"
            },
            {
              "name": "original_tool_count",
              "type": "int | None"
            },
            {
              "name": "error_message",
              "type": "str | None"
            }
          ],
          "return_type": null
        },
        "docstring": null,
        "dependencies": []
      },
      {
        "name": "__repr__",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": null
        },
        "docstring": null,
        "dependencies": []
      },
      {
        "name": "__init__",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": "app_config",
              "type": "Config"
            },
            {
              "name": "parent_logger",
              "type": "structlog.BoundLogger"
            },
            {
              "name": "output_queue",
              "type": "asyncio.Queue"
            }
          ],
          "return_type": null
        },
        "docstring": null,
        "dependencies": []
      }
    ],
    "src/mcp_vacuum/adk/discovery_agent.py": [
      {
        "name": "__init__",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": "server_info",
              "type": "MCPServiceRecord"
            }
          ],
          "return_type": null
        },
        "docstring": null,
        "dependencies": []
      },
      {
        "name": "__repr__",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": null
        },
        "docstring": null,
        "dependencies": []
      },
      {
        "name": "__init__",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": "app_config",
              "type": "Config"
            },
            {
              "name": "parent_logger",
              "type": "structlog.BoundLogger"
            },
            {
              "name": "output_queue",
              "type": "asyncio.Queue"
            }
          ],
          "return_type": null
        },
        "docstring": null,
        "dependencies": []
      }
    ],
    "src/mcp_vacuum/adk/mcp_client_agent.py": [
      {
        "name": "__init__",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": "app_config",
              "type": "Config"
            },
            {
              "name": "parent_logger",
              "type": "structlog.BoundLogger"
            },
            {
              "name": "auth_agent_ref",
              "type": "AuthenticationAgent"
            }
          ],
          "return_type": null
        },
        "docstring": null,
        "dependencies": []
      }
    ],
    "src/mcp_vacuum/adk/orchestration_agent.py": [
      {
        "name": "__init__",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": "target_networks",
              "type": "list[str] | None"
            }
          ],
          "return_type": null
        },
        "docstring": null,
        "dependencies": []
      },
      {
        "name": "__init__",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": "server_id",
              "type": "str"
            },
            {
              "name": "server_info",
              "type": "dict[str, Any]"
            }
          ],
          "return_type": null
        },
        "docstring": null,
        "dependencies": []
      },
      {
        "name": "__init__",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": "server_id",
              "type": "str"
            },
            {
              "name": "mcp_tools_data",
              "type": "list[dict[str, Any]]"
            }
          ],
          "return_type": null
        },
        "docstring": null,
        "dependencies": []
      },
      {
        "name": "__init__",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": "app_config",
              "type": "Config"
            }
          ],
          "return_type": null
        },
        "docstring": null,
        "dependencies": []
      },
      {
        "name": "_setup_global_logging",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "None"
        },
        "docstring": null,
        "dependencies": []
      },
      {
        "name": "get_summary",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "dict[str, int]"
        },
        "docstring": null,
        "dependencies": []
      }
    ],
    "src/mcp_vacuum/auth/dynamic_registration.py": [
      {
        "name": "__init__",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": "app_config",
              "type": "Config"
            },
            {
              "name": "session",
              "type": "aiohttp.ClientSession | None"
            }
          ],
          "return_type": null
        },
        "docstring": "Initializes the DynamicClientRegistrar.\n\nArgs:\n    app_config: Global application configuration.\n    session: An optional shared aiohttp.ClientSession.",
        "dependencies": []
      }
    ],
    "src/mcp_vacuum/auth/oauth_client.py": [
      {
        "name": "__init__",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": "client_config",
              "type": "OAuth2ClientConfig"
            },
            {
              "name": "app_config",
              "type": "Config"
            },
            {
              "name": "session",
              "type": "aiohttp.ClientSession | None"
            }
          ],
          "return_type": null
        },
        "docstring": "Initializes the OAuth2 client.\n\nArgs:\n    client_config: Configuration specific to this OAuth client instance\n                   (client_id, endpoints, etc.).\n    app_config: Global application configuration, used for HTTP client\n                settings.\n    session: An optional shared aiohttp.ClientSession. If None, one\n             will be created.",
        "dependencies": []
      },
      {
        "name": "create_authorization_url",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": "state",
              "type": "str"
            },
            {
              "name": "pkce",
              "type": "PKCEChallenge"
            },
            {
              "name": "extra_params",
              "type": "dict[str, str] | None"
            }
          ],
          "return_type": "tuple[str, str, str]"
        },
        "docstring": "Creates the authorization URL to redirect the user to.\n\nArgs:\nstate: An opaque value used to maintain state between the request and\n       callback.\npkce: The PKCEChallenge object containing verifier, challenge, and\n      method.\nextra_params: Additional query parameters to include in the\n              authorization request.\n\nReturns:\n    A tuple containing:\n    - The full authorization URL.\n    - The state parameter used.\n    - The PKCE code verifier.",
        "dependencies": []
      }
    ],
    "src/mcp_vacuum/auth/pkce.py": [
      {
        "name": "generate_pkce_challenge_pair",
        "signature": {
          "args": [
            {
              "name": "code_challenge_method",
              "type": "str"
            }
          ],
          "return_type": "PKCEChallenge"
        },
        "docstring": "Generates a PKCE code_verifier and a corresponding code_challenge.\n\nArgs:\n    code_challenge_method: The method used to generate the challenge.\n                           Currently supports \"S256\" or \"plain\".\n\nReturns:\n    A PKCEChallenge object containing the verifier, challenge, and method.\n\nRaises:\n    ValueError: If an unsupported code_challenge_method is provided.",
        "dependencies": []
      }
    ],
    "src/mcp_vacuum/auth/token_manager.py": [
      {
        "name": "__init__",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": "app_config",
              "type": "Config"
            },
            {
              "name": "token_storage",
              "type": "BaseTokenStorage | None"
            }
          ],
          "return_type": null
        },
        "docstring": "Initializes the TokenManager.\n\nArgs:\n    app_config: The global application configuration.\n    token_storage: An instance of a token storage backend. If None,\n                   one will be created based on app_config.auth.",
        "dependencies": []
      }
    ],
    "src/mcp_vacuum/auth/token_storage.py": [
      {
        "name": "__init__",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": "auth_config",
              "type": "AuthConfig"
            }
          ],
          "return_type": null
        },
        "docstring": null,
        "dependencies": []
      },
      {
        "name": "_get_key",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": "server_id",
              "type": "str"
            },
            {
              "name": "suffix",
              "type": "str"
            }
          ],
          "return_type": "str"
        },
        "docstring": null,
        "dependencies": []
      },
      {
        "name": "__init__",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": "auth_config",
              "type": "AuthConfig"
            },
            {
              "name": "encryption_key",
              "type": "bytes"
            }
          ],
          "return_type": null
        },
        "docstring": null,
        "dependencies": []
      },
      {
        "name": "derive_key_from_password",
        "signature": {
          "args": [
            {
              "name": "password",
              "type": "str"
            },
            {
              "name": "salt",
              "type": "bytes"
            }
          ],
          "return_type": "bytes"
        },
        "docstring": "Derives an encryption key from a password using PBKDF2HMAC-SHA256.",
        "dependencies": []
      },
      {
        "name": "get_token_storage",
        "signature": {
          "args": [
            {
              "name": "auth_config",
              "type": "AuthConfig"
            }
          ],
          "return_type": "BaseTokenStorage"
        },
        "docstring": "Factory function to get a token storage instance based on configuration.\nRequires ENCRYPTION_KEY_ENV_VAR or similar for EncryptedFileTokenStorage if\nused.",
        "dependencies": []
      }
    ],
    "src/mcp_vacuum/config.py": [
      {
        "name": "from_file",
        "signature": {
          "args": [
            {
              "name": "cls",
              "type": null
            },
            {
              "name": "file_path",
              "type": "Path"
            }
          ],
          "return_type": "'Config'"
        },
        "docstring": "Create configuration strictly from a JSON file.\nNote: This does not layer with environment variables. For layered loading,\npydantic-settings offers other mechanisms if env_file in SettingsConfigDict is not sufficient.",
        "dependencies": []
      }
    ],
    "src/mcp_vacuum/discovery/discovery_service.py": [
      {
        "name": "__init__",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": "app_config",
              "type": "Config"
            }
          ],
          "return_type": null
        },
        "docstring": null,
        "dependencies": []
      },
      {
        "name": "get_cached_server",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": "server_id",
              "type": "str"
            }
          ],
          "return_type": "MCPServiceRecord | None"
        },
        "docstring": "Returns a cached MCPServiceRecord if found and not expired.",
        "dependencies": []
      },
      {
        "name": "get_all_cached_servers",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "list[MCPServiceRecord]"
        },
        "docstring": "Returns all currently cached and valid (non-expired TTL) MCPServiceRecords.",
        "dependencies": []
      }
    ],
    "src/mcp_vacuum/mcp_client/base_client.py": [
      {
        "name": "generate_jsonrpc_request",
        "signature": {
          "args": [
            {
              "name": "method",
              "type": "str"
            },
            {
              "name": "params",
              "type": "dict[str, Any] | None"
            },
            {
              "name": "request_id",
              "type": "str | int | None"
            }
          ],
          "return_type": "dict[str, Any]"
        },
        "docstring": "Generates a JSONRPC 2.0 request dictionary.",
        "dependencies": []
      },
      {
        "name": "__init__",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": "service_record",
              "type": "MCPServiceRecord"
            },
            {
              "name": "config",
              "type": "Config"
            },
            {
              "name": "aiohttp_session",
              "type": "aiohttp.ClientSession | None"
            }
          ],
          "return_type": null
        },
        "docstring": null,
        "dependencies": []
      },
      {
        "name": "get_session",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "aiohttp.ClientSession | None"
        },
        "docstring": "Returns the aiohttp session if used by the client (primarily for HTTP-based transports).",
        "dependencies": []
      }
    ],
    "src/mcp_vacuum/mcp_client/exceptions.py": [
      {
        "name": "__init__",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": "message",
              "type": "str"
            },
            {
              "name": "error_code",
              "type": "int | None"
            },
            {
              "name": "error_data",
              "type": "dict | None"
            }
          ],
          "return_type": null
        },
        "docstring": null,
        "dependencies": []
      },
      {
        "name": "__init__",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": "tool_name",
              "type": "str"
            },
            {
              "name": "message",
              "type": "str"
            },
            {
              "name": "error_code",
              "type": "int | None"
            },
            {
              "name": "error_data",
              "type": "dict | None"
            }
          ],
          "return_type": null
        },
        "docstring": null,
        "dependencies": []
      }
    ],
    "src/mcp_vacuum/mcp_client/http_client.py": [
      {
        "name": "__init__",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": "service_record",
              "type": "MCPServiceRecord"
            },
            {
              "name": "config",
              "type": "Config"
            },
            {
              "name": "aiohttp_session",
              "type": "aiohttp.ClientSession | None"
            }
          ],
          "return_type": null
        },
        "docstring": null,
        "dependencies": []
      }
    ],
    "src/mcp_vacuum/models/auth.py": [
      {
        "name": "is_expired",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "bool"
        },
        "docstring": "Check if token is expired with a 60-second buffer.",
        "dependencies": []
      },
      {
        "name": "expires_at",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "float | None"
        },
        "docstring": null,
        "dependencies": []
      }
    ],
    "src/mcp_vacuum/schema_gen/schema_converter_service.py": [
      {
        "name": "has_errors",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "bool"
        },
        "docstring": null,
        "dependencies": []
      },
      {
        "name": "__init__",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": "app_config",
              "type": "Config"
            }
          ],
          "return_type": null
        },
        "docstring": null,
        "dependencies": []
      },
      {
        "name": "_sanitize_k8s_name",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": "name",
              "type": "str"
            },
            {
              "name": "max_length",
              "type": "int"
            }
          ],
          "return_type": "str"
        },
        "docstring": "Sanitizes a string to be a Kubernetes-compliant name.",
        "dependencies": []
      },
      {
        "name": "_to_camel_case",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": "snake_str",
              "type": "str"
            }
          ],
          "return_type": "str"
        },
        "docstring": "Converts snake_case or kebab-case to camelCase.",
        "dependencies": []
      },
      {
        "name": "_categorize_tool",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": "mcp_tool",
              "type": "MCPTool"
            }
          ],
          "return_type": "ToolCategory"
        },
        "docstring": "Categorizes the tool based on name, description, schema (simplified).",
        "dependencies": []
      },
      {
        "name": "_assess_risk_level",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": "mcp_tool",
              "type": "MCPTool"
            },
            {
              "name": "category",
              "type": "ToolCategory"
            }
          ],
          "return_type": "RiskLevel"
        },
        "docstring": "Assesses risk level (simplified).",
        "dependencies": []
      },
      {
        "name": "_transform_json_schema_to_k8s_crd",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": "json_schema",
              "type": "dict[str, Any]"
            },
            {
              "name": "is_output_schema",
              "type": "bool"
            },
            {
              "name": "mcp_tool_name",
              "type": "str | None"
            }
          ],
          "return_type": "KagentCRDSchema"
        },
        "docstring": "Converts a JSON Schema (Draft 7) to a Kubernetes CRD OpenAPI v3 compatible schema structure.\nThis is a complex task. This implementation will be a simplified version for P0.\n- Removes unsupported keywords ($schema, $id).\n- Renames fields to camelCase if properties exist.\n- Recursively processes nested schemas (properties, items).",
        "dependencies": []
      },
      {
        "name": "transform_node",
        "signature": {
          "args": [
            {
              "name": "node",
              "type": "dict[str, Any]"
            }
          ],
          "return_type": "dict[str, Any]"
        },
        "docstring": null,
        "dependencies": []
      }
    ],
    "src/mcp_vacuum/server.py": [
      {
        "name": "parse_auth_method",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": "v",
              "type": null
            }
          ],
          "return_type": null
        },
        "docstring": "Parse auth method from string if needed.",
        "dependencies": []
      },
      {
        "name": "validate_endpoint",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": "v",
              "type": null
            }
          ],
          "return_type": null
        },
        "docstring": "Validate endpoint URL format.",
        "dependencies": []
      },
      {
        "name": "host",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "str"
        },
        "docstring": "Get the host from endpoint.",
        "dependencies": []
      },
      {
        "name": "port",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "int"
        },
        "docstring": "Get the port from endpoint.",
        "dependencies": []
      },
      {
        "name": "is_secure",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "bool"
        },
        "docstring": "Check if the server uses HTTPS.",
        "dependencies": []
      },
      {
        "name": "requires_auth",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "bool"
        },
        "docstring": "Check if server requires authentication.",
        "dependencies": []
      },
      {
        "name": "is_authenticated",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "bool"
        },
        "docstring": "Check if server is authenticated.",
        "dependencies": []
      },
      {
        "name": "update_status",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": "status",
              "type": "ServerStatus"
            }
          ],
          "return_type": "None"
        },
        "docstring": "Update server status.",
        "dependencies": []
      },
      {
        "name": "set_auth_credentials",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": "credentials",
              "type": "AuthCredentials"
            }
          ],
          "return_type": "None"
        },
        "docstring": "Set authentication credentials.",
        "dependencies": []
      },
      {
        "name": "set_capabilities",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": "capabilities",
              "type": "ServerCapabilities"
            }
          ],
          "return_type": "None"
        },
        "docstring": "Set server capabilities.",
        "dependencies": []
      },
      {
        "name": "add_metadata",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": "key",
              "type": "str"
            },
            {
              "name": "value",
              "type": "str"
            }
          ],
          "return_type": "None"
        },
        "docstring": "Add metadata to the server.",
        "dependencies": []
      },
      {
        "name": "get_security_assessment",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "dict[str, bool]"
        },
        "docstring": "Get security assessment of the server.",
        "dependencies": []
      },
      {
        "name": "to_dict",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "dict"
        },
        "docstring": "Convert server to dictionary representation.",
        "dependencies": []
      },
      {
        "name": "from_dict",
        "signature": {
          "args": [
            {
              "name": "cls",
              "type": null
            },
            {
              "name": "data",
              "type": "dict"
            }
          ],
          "return_type": "'MCPServer'"
        },
        "docstring": "Create server from dictionary representation.",
        "dependencies": []
      }
    ],
    "src/mcp_vacuum/utils/resilience.py": [
      {
        "name": "__init__",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": "message",
              "type": "str"
            },
            {
              "name": "remaining_time",
              "type": "float"
            }
          ],
          "return_type": null
        },
        "docstring": null,
        "dependencies": []
      },
      {
        "name": "__init__",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": "failure_threshold",
              "type": "int"
            },
            {
              "name": "recovery_timeout_seconds",
              "type": "float"
            },
            {
              "name": "half_open_max_successes",
              "type": "int"
            },
            {
              "name": "name",
              "type": "str | None"
            }
          ],
          "return_type": null
        },
        "docstring": null,
        "dependencies": []
      },
      {
        "name": "state",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "CircuitBreakerState"
        },
        "docstring": null,
        "dependencies": []
      }
    ],
    "tests/adk/test_discovery_agent.py": [
      {
        "name": "app_config_adk",
        "signature": {
          "args": [],
          "return_type": null
        },
        "docstring": null,
        "dependencies": []
      },
      {
        "name": "mock_parent_logger",
        "signature": {
          "args": [],
          "return_type": null
        },
        "docstring": null,
        "dependencies": []
      },
      {
        "name": "output_queue",
        "signature": {
          "args": [],
          "return_type": null
        },
        "docstring": null,
        "dependencies": []
      },
      {
        "name": "mock_discovery_service",
        "signature": {
          "args": [],
          "return_type": null
        },
        "docstring": null,
        "dependencies": []
      },
      {
        "name": "discovery_agent",
        "signature": {
          "args": [
            {
              "name": "MockDiscoveryServiceCls",
              "type": null
            },
            {
              "name": "app_config_adk",
              "type": null
            },
            {
              "name": "mock_parent_logger",
              "type": null
            },
            {
              "name": "output_queue",
              "type": null
            },
            {
              "name": "mock_discovery_service",
              "type": null
            }
          ],
          "return_type": null
        },
        "docstring": null,
        "dependencies": []
      }
    ],
    "tests/test_config.py": [
      {
        "name": "test_config_from_env",
        "signature": {
          "args": [
            {
              "name": "monkeypatch",
              "type": null
            }
          ],
          "return_type": "None"
        },
        "docstring": "Test loading configuration from environment variables.",
        "dependencies": []
      },
      {
        "name": "test_config_defaults",
        "signature": {
          "args": [],
          "return_type": "None"
        },
        "docstring": "Test default configuration values for new and existing fields.",
        "dependencies": []
      },
      {
        "name": "test_config_from_file",
        "signature": {
          "args": [
            {
              "name": "tmp_path",
              "type": null
            }
          ],
          "return_type": "None"
        },
        "docstring": "Test loading configuration from a JSON file.",
        "dependencies": [
          "json"
        ]
      },
      {
        "name": "test_partial_config_from_file",
        "signature": {
          "args": [
            {
              "name": "tmp_path",
              "type": null
            }
          ],
          "return_type": "None"
        },
        "docstring": "Test loading partial configuration from a file, defaults should apply.",
        "dependencies": [
          "json"
        ]
      }
    ],
    "tests/test_discovery_service.py": [
      {
        "name": "app_config_mdns_enabled",
        "signature": {
          "args": [],
          "return_type": null
        },
        "docstring": null,
        "dependencies": []
      },
      {
        "name": "discovery_service",
        "signature": {
          "args": [
            {
              "name": "app_config_mdns_enabled",
              "type": null
            }
          ],
          "return_type": null
        },
        "docstring": null,
        "dependencies": []
      },
      {
        "name": "MockAsyncServiceInfo",
        "signature": {
          "args": [],
          "return_type": null
        },
        "docstring": "Mocks zeroconf.asyncio.AsyncServiceInfo.",
        "dependencies": []
      },
      {
        "name": "__init__",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": "type_",
              "type": "str"
            },
            {
              "name": "name",
              "type": "str"
            }
          ],
          "return_type": null
        },
        "docstring": null,
        "dependencies": []
      },
      {
        "name": "parsed_addresses",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": "version",
              "type": null
            }
          ],
          "return_type": "List[str]"
        },
        "docstring": null,
        "dependencies": []
      },
      {
        "name": "parsed_addresses_by_version",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": "version",
              "type": "int"
            }
          ],
          "return_type": "List[str]"
        },
        "docstring": null,
        "dependencies": []
      },
      {
        "name": "MockAsyncServiceBrowser",
        "signature": {
          "args": [],
          "return_type": null
        },
        "docstring": "Mocks zeroconf.asyncio.AsyncServiceBrowser.",
        "dependencies": []
      },
      {
        "name": "__init__",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": "aiozc_zeroconf",
              "type": null
            },
            {
              "name": "service_types",
              "type": null
            },
            {
              "name": "handlers",
              "type": null
            }
          ],
          "return_type": null
        },
        "docstring": null,
        "dependencies": []
      },
      {
        "name": "MockAsyncZeroconf",
        "signature": {
          "args": [],
          "return_type": null
        },
        "docstring": "Mocks zeroconf.asyncio.AsyncZeroconf.",
        "dependencies": []
      },
      {
        "name": "__init__",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": null
        },
        "docstring": null,
        "dependencies": []
      }
    ],
    "tests/test_environment.py": [
      {
        "name": "test_python_version",
        "signature": {
          "args": [],
          "return_type": "None"
        },
        "docstring": "Ensure we're running Python 3.12+.",
        "dependencies": []
      },
      {
        "name": "test_project_structure",
        "signature": {
          "args": [],
          "return_type": "None"
        },
        "docstring": "Verify basic project structure.",
        "dependencies": []
      },
      {
        "name": "test_development_tools",
        "signature": {
          "args": [],
          "return_type": "None"
        },
        "docstring": "Verify development tools are installed.",
        "dependencies": []
      }
    ],
    "tests/test_http_mcp_client.py": [
      {
        "name": "app_config",
        "signature": {
          "args": [],
          "return_type": null
        },
        "docstring": null,
        "dependencies": []
      },
      {
        "name": "service_record",
        "signature": {
          "args": [],
          "return_type": null
        },
        "docstring": null,
        "dependencies": []
      },
      {
        "name": "mock_aiohttp_session_post",
        "signature": {
          "args": [],
          "return_type": null
        },
        "docstring": "Fixture to provide a mock for aiohttp.ClientSession.post method.",
        "dependencies": []
      }
    ],
    "tests/test_models.py": [
      {
        "name": "test_oauth2token_is_expired",
        "signature": {
          "args": [],
          "return_type": "None"
        },
        "docstring": "Test OAuth2Token.is_expired property.",
        "dependencies": []
      },
      {
        "name": "test_pkce_challenge_validation",
        "signature": {
          "args": [],
          "return_type": "None"
        },
        "docstring": "Test PKCEChallenge model validation (though it's mostly for data holding).",
        "dependencies": []
      },
      {
        "name": "test_mcp_service_record_creation",
        "signature": {
          "args": [],
          "return_type": "None"
        },
        "docstring": "Test basic creation and HttpUrl validation for MCPServiceRecord.",
        "dependencies": []
      },
      {
        "name": "test_mcp_tool_creation",
        "signature": {
          "args": [],
          "return_type": "None"
        },
        "docstring": "Test MCPTool creation with required schema fields.",
        "dependencies": []
      },
      {
        "name": "test_kagent_tool_creation",
        "signature": {
          "args": [],
          "return_type": "None"
        },
        "docstring": "Test KagentTool creation with nested models.",
        "dependencies": []
      },
      {
        "name": "test_kagent_crd_schema_extra_fields",
        "signature": {
          "args": [],
          "return_type": "None"
        },
        "docstring": "Test KagentCRDSchema allows extra fields (as JSON schema can be flexible).",
        "dependencies": []
      },
      {
        "name": "test_enum_usage_in_models",
        "signature": {
          "args": [],
          "return_type": "None"
        },
        "docstring": "Test that enums are correctly used and validated in models.",
        "dependencies": []
      },
      {
        "name": "test_mcp_capability_type",
        "signature": {
          "args": [],
          "return_type": "None"
        },
        "docstring": null,
        "dependencies": []
      },
      {
        "name": "test_model_field_defaults",
        "signature": {
          "args": [],
          "return_type": "None"
        },
        "docstring": "Test default values for various model fields.",
        "dependencies": []
      },
      {
        "name": "test_validation_result",
        "signature": {
          "args": [],
          "return_type": "None"
        },
        "docstring": null,
        "dependencies": []
      }
    ],
    "tests/test_oauth_client.py": [
      {
        "name": "app_config",
        "signature": {
          "args": [],
          "return_type": null
        },
        "docstring": null,
        "dependencies": []
      },
      {
        "name": "oauth_client_config_data",
        "signature": {
          "args": [],
          "return_type": null
        },
        "docstring": null,
        "dependencies": []
      },
      {
        "name": "oauth_client",
        "signature": {
          "args": [
            {
              "name": "oauth_client_config_data",
              "type": null
            },
            {
              "name": "app_config",
              "type": null
            }
          ],
          "return_type": null
        },
        "docstring": null,
        "dependencies": []
      }
    ],
    "tests/test_pkce.py": [
      {
        "name": "test_generate_pkce_s256",
        "signature": {
          "args": [],
          "return_type": "None"
        },
        "docstring": "Test S256 PKCE challenge generation.",
        "dependencies": []
      },
      {
        "name": "test_generate_pkce_plain",
        "signature": {
          "args": [],
          "return_type": "None"
        },
        "docstring": "Test 'plain' PKCE challenge generation.",
        "dependencies": []
      },
      {
        "name": "test_generate_pkce_unsupported_method",
        "signature": {
          "args": [],
          "return_type": "None"
        },
        "docstring": "Test error handling for unsupported challenge methods.",
        "dependencies": []
      },
      {
        "name": "test_pkce_verifier_default_generation",
        "signature": {
          "args": [],
          "return_type": "None"
        },
        "docstring": "Test that the default generate_pkce_challenge_pair function generates a verifier of max allowed length.",
        "dependencies": []
      },
      {
        "name": "test_pkce_model_accepts_various_verifier_lengths",
        "signature": {
          "args": [
            {
              "name": "verifier_length",
              "type": "int"
            }
          ],
          "return_type": "None"
        },
        "docstring": "Test that the PKCEChallenge model accepts verifiers of various allowed lengths.",
        "dependencies": []
      },
      {
        "name": "test_pkce_model_rejects_invalid_verifier_lengths",
        "signature": {
          "args": [],
          "return_type": "None"
        },
        "docstring": "Test that the PKCEChallenge model rejects verifiers of invalid lengths.",
        "dependencies": []
      },
      {
        "name": "test_pkce_minimum_length_verifier_challenge_computation",
        "signature": {
          "args": [],
          "return_type": "None"
        },
        "docstring": "Test that a 43-character code_verifier is accepted and challenge is computed correctly by the model.",
        "dependencies": []
      }
    ],
    "tests/test_schema_converter_service.py": [
      {
        "name": "app_config",
        "signature": {
          "args": [],
          "return_type": "Config"
        },
        "docstring": null,
        "dependencies": []
      },
      {
        "name": "converter_service",
        "signature": {
          "args": [
            {
              "name": "app_config",
              "type": "Config"
            }
          ],
          "return_type": "SchemaConverterService"
        },
        "docstring": null,
        "dependencies": []
      },
      {
        "name": "sample_mcp_tool",
        "signature": {
          "args": [],
          "return_type": "MCPTool"
        },
        "docstring": null,
        "dependencies": []
      },
      {
        "name": "sample_server_info",
        "signature": {
          "args": [],
          "return_type": "MCPServerInfo"
        },
        "docstring": null,
        "dependencies": []
      },
      {
        "name": "test_sanitize_k8s_name",
        "signature": {
          "args": [
            {
              "name": "converter_service",
              "type": "SchemaConverterService"
            }
          ],
          "return_type": "None"
        },
        "docstring": null,
        "dependencies": []
      },
      {
        "name": "test_to_camel_case",
        "signature": {
          "args": [
            {
              "name": "converter_service",
              "type": "SchemaConverterService"
            }
          ],
          "return_type": "None"
        },
        "docstring": null,
        "dependencies": []
      },
      {
        "name": "test_categorize_tool",
        "signature": {
          "args": [
            {
              "name": "converter_service",
              "type": "SchemaConverterService"
            },
            {
              "name": "sample_mcp_tool",
              "type": "MCPTool"
            }
          ],
          "return_type": "None"
        },
        "docstring": null,
        "dependencies": []
      },
      {
        "name": "test_assess_risk_level",
        "signature": {
          "args": [
            {
              "name": "converter_service",
              "type": "SchemaConverterService"
            }
          ],
          "return_type": "None"
        },
        "docstring": null,
        "dependencies": []
      },
      {
        "name": "test_transform_json_schema_to_k8s_crd_input_params",
        "signature": {
          "args": [
            {
              "name": "converter_service",
              "type": "SchemaConverterService"
            },
            {
              "name": "mcp_schema",
              "type": "dict[str, Any]"
            },
            {
              "name": "expected_k8s_props",
              "type": "dict[str, Any] | None"
            },
            {
              "name": "sample_mcp_tool",
              "type": "MCPTool"
            }
          ],
          "return_type": "None"
        },
        "docstring": "Test input schema transformation (must result in an object schema for parameters).",
        "dependencies": []
      },
      {
        "name": "test_transform_json_schema_to_k8s_crd_output_schema",
        "signature": {
          "args": [
            {
              "name": "converter_service",
              "type": "SchemaConverterService"
            },
            {
              "name": "sample_mcp_tool",
              "type": "MCPTool"
            }
          ],
          "return_type": "None"
        },
        "docstring": "Test output schema transformation (can be non-object).",
        "dependencies": []
      }
    ],
    "tests/test_token_manager.py": [
      {
        "name": "app_config",
        "signature": {
          "args": [],
          "return_type": "Config"
        },
        "docstring": null,
        "dependencies": []
      },
      {
        "name": "mock_token_storage",
        "signature": {
          "args": [],
          "return_type": "AsyncMock"
        },
        "docstring": null,
        "dependencies": []
      },
      {
        "name": "token_manager",
        "signature": {
          "args": [
            {
              "name": "app_config",
              "type": null
            },
            {
              "name": "mock_token_storage",
              "type": null
            }
          ],
          "return_type": null
        },
        "docstring": null,
        "dependencies": []
      },
      {
        "name": "sample_server_info",
        "signature": {
          "args": [],
          "return_type": null
        },
        "docstring": null,
        "dependencies": []
      }
    ],
    "tests/test_token_storage.py": [
      {
        "name": "auth_config_keyring",
        "signature": {
          "args": [],
          "return_type": null
        },
        "docstring": null,
        "dependencies": []
      },
      {
        "name": "mock_keyring_module",
        "signature": {
          "args": [],
          "return_type": null
        },
        "docstring": null,
        "dependencies": []
      },
      {
        "name": "set_password_mock",
        "signature": {
          "args": [
            {
              "name": "service",
              "type": null
            },
            {
              "name": "username",
              "type": null
            },
            {
              "name": "password",
              "type": null
            }
          ],
          "return_type": null
        },
        "docstring": null,
        "dependencies": []
      },
      {
        "name": "get_password_mock",
        "signature": {
          "args": [
            {
              "name": "service",
              "type": null
            },
            {
              "name": "username",
              "type": null
            }
          ],
          "return_type": null
        },
        "docstring": null,
        "dependencies": []
      },
      {
        "name": "delete_password_mock",
        "signature": {
          "args": [
            {
              "name": "service",
              "type": null
            },
            {
              "name": "username",
              "type": null
            }
          ],
          "return_type": null
        },
        "docstring": null,
        "dependencies": []
      },
      {
        "name": "test_get_token_storage_factory",
        "signature": {
          "args": [
            {
              "name": "auth_config_keyring",
              "type": null
            }
          ],
          "return_type": null
        },
        "docstring": "Test the get_token_storage factory function.",
        "dependencies": []
      }
    ]
  },
  "main": {
    "src/mcp_vacuum/__main__.py": [
      {
        "name": "cli",
        "signature": {
          "args": [
            {
              "name": "ctx",
              "type": "click.Context"
            },
            {
              "name": "config_file",
              "type": "Optional[str]"
            },
            {
              "name": "log_level",
              "type": "Optional[str]"
            },
            {
              "name": "log_format",
              "type": "Optional[str]"
            }
          ],
          "return_type": "None"
        },
        "docstring": "MCP Vacuum - Discovers MCP servers, authenticates, and converts schemas.",
        "dependencies": [
          "traceback"
        ]
      },
      {
        "name": "discover",
        "signature": {
          "args": [
            {
              "name": "ctx",
              "type": "click.Context"
            },
            {
              "name": "networks",
              "type": "List[str]"
            },
            {
              "name": "output_file",
              "type": "Optional[str]"
            }
          ],
          "return_type": "None"
        },
        "docstring": "Discovers MCP servers, authenticates, and generates Kagent schemas.",
        "dependencies": []
      },
      {
        "name": "version",
        "signature": {
          "args": [
            {
              "name": "ctx",
              "type": "click.Context"
            }
          ],
          "return_type": "None"
        },
        "docstring": "Show version information.",
        "dependencies": [
          null
        ]
      },
      {
        "name": "config_show",
        "signature": {
          "args": [
            {
              "name": "ctx",
              "type": "click.Context"
            }
          ],
          "return_type": "None"
        },
        "docstring": "Show current configuration.",
        "dependencies": [
          "json"
        ]
      }
    ],
    "src/mcp_vacuum/adk/auth_agent.py": [
      {
        "name": "__init__",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": "server_id",
              "type": "str"
            },
            {
              "name": "success",
              "type": "bool"
            },
            {
              "name": "auth_data",
              "type": "Optional[Dict[str, Any]]"
            },
            {
              "name": "error_message",
              "type": "Optional[str]"
            }
          ],
          "return_type": null
        },
        "docstring": null,
        "dependencies": []
      },
      {
        "name": "__repr__",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": null
        },
        "docstring": null,
        "dependencies": []
      },
      {
        "name": "__init__",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": "app_config",
              "type": "Config"
            },
            {
              "name": "parent_logger",
              "type": "structlog.BoundLogger"
            },
            {
              "name": "output_queue",
              "type": "asyncio.Queue"
            }
          ],
          "return_type": null
        },
        "docstring": null,
        "dependencies": []
      }
    ],
    "src/mcp_vacuum/adk/base.py": [
      {
        "name": "__init__",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": "agent_name",
              "type": "str"
            },
            {
              "name": "app_config",
              "type": "Config"
            },
            {
              "name": "parent_logger",
              "type": "Optional[structlog.BoundLogger]"
            }
          ],
          "return_type": null
        },
        "docstring": "Args:\n    agent_name: A unique name for this agent instance.\n    app_config: The global application configuration.\n    parent_logger: Optional logger from a parent agent for hierarchical logging.\n    **kwargs: Additional arguments for the underlying ADK BaseAgent.",
        "dependencies": []
      }
    ],
    "src/mcp_vacuum/adk/conversion_agent.py": [
      {
        "name": "__init__",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": "server_id",
              "type": "str"
            },
            {
              "name": "success",
              "type": "bool"
            },
            {
              "name": "kagent_tools_schemas",
              "type": "Optional[List[KagentTool]]"
            },
            {
              "name": "original_tool_count",
              "type": "Optional[int]"
            },
            {
              "name": "error_message",
              "type": "Optional[str]"
            }
          ],
          "return_type": null
        },
        "docstring": null,
        "dependencies": []
      },
      {
        "name": "__repr__",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": null
        },
        "docstring": null,
        "dependencies": []
      },
      {
        "name": "__init__",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": "app_config",
              "type": "Config"
            },
            {
              "name": "parent_logger",
              "type": "structlog.BoundLogger"
            },
            {
              "name": "output_queue",
              "type": "asyncio.Queue"
            }
          ],
          "return_type": null
        },
        "docstring": null,
        "dependencies": []
      }
    ],
    "src/mcp_vacuum/adk/discovery_agent.py": [
      {
        "name": "__init__",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": "server_info",
              "type": "MCPServiceRecord"
            }
          ],
          "return_type": null
        },
        "docstring": null,
        "dependencies": []
      },
      {
        "name": "__repr__",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": null
        },
        "docstring": null,
        "dependencies": []
      },
      {
        "name": "__init__",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": "app_config",
              "type": "Config"
            },
            {
              "name": "parent_logger",
              "type": "structlog.BoundLogger"
            },
            {
              "name": "output_queue",
              "type": "asyncio.Queue"
            }
          ],
          "return_type": null
        },
        "docstring": null,
        "dependencies": []
      }
    ],
    "src/mcp_vacuum/adk/mcp_client_agent.py": [
      {
        "name": "__init__",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": "app_config",
              "type": "Config"
            },
            {
              "name": "parent_logger",
              "type": "structlog.BoundLogger"
            },
            {
              "name": "auth_agent_ref",
              "type": "AuthenticationAgent"
            }
          ],
          "return_type": null
        },
        "docstring": null,
        "dependencies": []
      }
    ],
    "src/mcp_vacuum/adk/orchestration_agent.py": [
      {
        "name": "__init__",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": "target_networks",
              "type": "Optional[List[str]]"
            }
          ],
          "return_type": null
        },
        "docstring": null,
        "dependencies": []
      },
      {
        "name": "__init__",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": "server_id",
              "type": "str"
            },
            {
              "name": "server_info",
              "type": "Dict[str, Any]"
            }
          ],
          "return_type": null
        },
        "docstring": null,
        "dependencies": []
      },
      {
        "name": "__init__",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": "server_id",
              "type": "str"
            },
            {
              "name": "mcp_tools_data",
              "type": "List[Dict[str, Any]]"
            }
          ],
          "return_type": null
        },
        "docstring": null,
        "dependencies": []
      },
      {
        "name": "__init__",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": "app_config",
              "type": "Config"
            }
          ],
          "return_type": null
        },
        "docstring": null,
        "dependencies": []
      },
      {
        "name": "_setup_global_logging",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "None"
        },
        "docstring": null,
        "dependencies": [
          "logging"
        ]
      },
      {
        "name": "get_summary",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "Dict[str, int]"
        },
        "docstring": null,
        "dependencies": []
      }
    ],
    "src/mcp_vacuum/auth/dynamic_registration.py": [
      {
        "name": "__init__",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": "app_config",
              "type": "Config"
            },
            {
              "name": "session",
              "type": "Optional[aiohttp.ClientSession]"
            }
          ],
          "return_type": null
        },
        "docstring": "Initializes the DynamicClientRegistrar.\n\nArgs:\n    app_config: Global application configuration.\n    session: An optional shared aiohttp.ClientSession.",
        "dependencies": []
      }
    ],
    "src/mcp_vacuum/auth/oauth_client.py": [
      {
        "name": "__init__",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": "client_config",
              "type": "OAuth2ClientConfig"
            },
            {
              "name": "app_config",
              "type": "Config"
            },
            {
              "name": "session",
              "type": "Optional[aiohttp.ClientSession]"
            }
          ],
          "return_type": null
        },
        "docstring": "Initializes the OAuth2 client.\n\nArgs:\n    client_config: Configuration specific to this OAuth client instance (client_id, endpoints, etc.).\n    app_config: Global application configuration, used for HTTP client settings.\n    session: An optional shared aiohttp.ClientSession. If None, one will be created.",
        "dependencies": []
      },
      {
        "name": "create_authorization_url",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": "state",
              "type": "str"
            },
            {
              "name": "pkce",
              "type": "PKCEChallenge"
            },
            {
              "name": "extra_params",
              "type": "Optional[Dict[str, str]]"
            }
          ],
          "return_type": "Tuple[str, str, str]"
        },
        "docstring": "Creates the authorization URL to redirect the user to.\n\nArgs:\n    state: An opaque value used to maintain state between the request and callback.\n    pkce: The PKCEChallenge object containing verifier, challenge, and method.\n    extra_params: Additional query parameters to include in the authorization request.\n\nReturns:\n    A tuple containing:\n    - The full authorization URL.\n    - The state parameter used.\n    - The PKCE code verifier.",
        "dependencies": []
      }
    ],
    "src/mcp_vacuum/auth/pkce.py": [
      {
        "name": "generate_pkce_challenge_pair",
        "signature": {
          "args": [
            {
              "name": "code_challenge_method",
              "type": "str"
            }
          ],
          "return_type": "PKCEChallenge"
        },
        "docstring": "Generates a PKCE code_verifier and a corresponding code_challenge.\n\nArgs:\n    code_challenge_method: The method used to generate the challenge.\n                           Currently supports \"S256\" or \"plain\".\n\nReturns:\n    A PKCEChallenge object containing the verifier, challenge, and method.\n\nRaises:\n    ValueError: If an unsupported code_challenge_method is provided.",
        "dependencies": []
      }
    ],
    "src/mcp_vacuum/auth/token_manager.py": [
      {
        "name": "__init__",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": "app_config",
              "type": "Config"
            },
            {
              "name": "token_storage",
              "type": "Optional[BaseTokenStorage]"
            }
          ],
          "return_type": null
        },
        "docstring": "Initializes the TokenManager.\n\nArgs:\n    app_config: The global application configuration.\n    token_storage: An instance of a token storage backend. If None, one will be created\n                   based on app_config.auth.",
        "dependencies": []
      }
    ],
    "src/mcp_vacuum/auth/token_storage.py": [
      {
        "name": "__init__",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": "auth_config",
              "type": "AuthConfig"
            }
          ],
          "return_type": null
        },
        "docstring": null,
        "dependencies": []
      },
      {
        "name": "_get_key",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": "server_id",
              "type": "str"
            },
            {
              "name": "suffix",
              "type": "str"
            }
          ],
          "return_type": "str"
        },
        "docstring": null,
        "dependencies": []
      },
      {
        "name": "__init__",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": "auth_config",
              "type": "AuthConfig"
            },
            {
              "name": "encryption_key",
              "type": "bytes"
            }
          ],
          "return_type": null
        },
        "docstring": null,
        "dependencies": []
      },
      {
        "name": "derive_key_from_password",
        "signature": {
          "args": [
            {
              "name": "password",
              "type": "str"
            },
            {
              "name": "salt",
              "type": "bytes"
            }
          ],
          "return_type": "bytes"
        },
        "docstring": "Derives an encryption key from a password using PBKDF2HMAC-SHA256.",
        "dependencies": []
      },
      {
        "name": "get_token_storage",
        "signature": {
          "args": [
            {
              "name": "auth_config",
              "type": "AuthConfig"
            }
          ],
          "return_type": "BaseTokenStorage"
        },
        "docstring": "Factory function to get a token storage instance based on configuration.\nRequires ENCRYPTION_KEY_ENV_VAR or similar for EncryptedFileTokenStorage if used.",
        "dependencies": []
      }
    ],
    "src/mcp_vacuum/config.py": [
      {
        "name": "from_file",
        "signature": {
          "args": [
            {
              "name": "cls",
              "type": null
            },
            {
              "name": "file_path",
              "type": "Path"
            }
          ],
          "return_type": "'Config'"
        },
        "docstring": "Create configuration strictly from a JSON file.\nNote: This does not layer with environment variables. For layered loading,\npydantic-settings offers other mechanisms if env_file in SettingsConfigDict is not sufficient.",
        "dependencies": []
      }
    ],
    "src/mcp_vacuum/discovery/discovery_service.py": [
      {
        "name": "__init__",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": "app_config",
              "type": "Config"
            }
          ],
          "return_type": null
        },
        "docstring": null,
        "dependencies": []
      },
      {
        "name": "get_cached_server",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": "server_id",
              "type": "str"
            }
          ],
          "return_type": "Optional[MCPServiceRecord]"
        },
        "docstring": "Returns a cached MCPServiceRecord if found and not expired.",
        "dependencies": []
      },
      {
        "name": "get_all_cached_servers",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "List[MCPServiceRecord]"
        },
        "docstring": "Returns all currently cached and valid (non-expired TTL) MCPServiceRecords.",
        "dependencies": []
      }
    ],
    "src/mcp_vacuum/mcp_client/base_client.py": [
      {
        "name": "generate_jsonrpc_request",
        "signature": {
          "args": [
            {
              "name": "method",
              "type": "str"
            },
            {
              "name": "params",
              "type": "Optional[Dict[str, Any]]"
            },
            {
              "name": "request_id",
              "type": "Optional[Union[str, int]]"
            }
          ],
          "return_type": "Dict[str, Any]"
        },
        "docstring": "Generates a JSONRPC 2.0 request dictionary.",
        "dependencies": []
      },
      {
        "name": "__init__",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": "service_record",
              "type": "MCPServiceRecord"
            },
            {
              "name": "config",
              "type": "Config"
            },
            {
              "name": "aiohttp_session",
              "type": "Optional[aiohttp.ClientSession]"
            }
          ],
          "return_type": null
        },
        "docstring": null,
        "dependencies": []
      },
      {
        "name": "get_session",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "Optional[aiohttp.ClientSession]"
        },
        "docstring": "Returns the aiohttp session if used by the client (primarily for HTTP-based transports).",
        "dependencies": []
      }
    ],
    "src/mcp_vacuum/mcp_client/exceptions.py": [
      {
        "name": "__init__",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": "message",
              "type": "str"
            },
            {
              "name": "error_code",
              "type": "int"
            },
            {
              "name": "error_data",
              "type": "dict"
            }
          ],
          "return_type": null
        },
        "docstring": null,
        "dependencies": []
      },
      {
        "name": "__init__",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": "tool_name",
              "type": "str"
            },
            {
              "name": "message",
              "type": "str"
            },
            {
              "name": "error_code",
              "type": "int"
            },
            {
              "name": "error_data",
              "type": "dict"
            }
          ],
          "return_type": null
        },
        "docstring": null,
        "dependencies": []
      }
    ],
    "src/mcp_vacuum/mcp_client/http_client.py": [
      {
        "name": "__init__",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": "service_record",
              "type": "MCPServiceRecord"
            },
            {
              "name": "config",
              "type": "Config"
            },
            {
              "name": "aiohttp_session",
              "type": "Optional[aiohttp.ClientSession]"
            }
          ],
          "return_type": null
        },
        "docstring": null,
        "dependencies": []
      }
    ],
    "src/mcp_vacuum/models/auth.py": [
      {
        "name": "is_expired",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "bool"
        },
        "docstring": "Check if token is expired with a 60-second buffer.",
        "dependencies": []
      },
      {
        "name": "expires_at",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "Optional[float]"
        },
        "docstring": null,
        "dependencies": []
      }
    ],
    "src/mcp_vacuum/schema_gen/schema_converter_service.py": [
      {
        "name": "has_errors",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "bool"
        },
        "docstring": null,
        "dependencies": []
      },
      {
        "name": "__init__",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": "app_config",
              "type": "Config"
            }
          ],
          "return_type": null
        },
        "docstring": null,
        "dependencies": []
      },
      {
        "name": "_sanitize_k8s_name",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": "name",
              "type": "str"
            },
            {
              "name": "max_length",
              "type": "int"
            }
          ],
          "return_type": "str"
        },
        "docstring": "Sanitizes a string to be a Kubernetes-compliant name.",
        "dependencies": []
      },
      {
        "name": "_to_camel_case",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": "snake_str",
              "type": "str"
            }
          ],
          "return_type": "str"
        },
        "docstring": "Converts snake_case or kebab-case to camelCase.",
        "dependencies": []
      },
      {
        "name": "_categorize_tool",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": "mcp_tool",
              "type": "MCPTool"
            }
          ],
          "return_type": "ToolCategory"
        },
        "docstring": "Categorizes the tool based on name, description, schema (simplified).",
        "dependencies": []
      },
      {
        "name": "_assess_risk_level",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": "mcp_tool",
              "type": "MCPTool"
            },
            {
              "name": "category",
              "type": "ToolCategory"
            }
          ],
          "return_type": "RiskLevel"
        },
        "docstring": "Assesses risk level (simplified).",
        "dependencies": []
      },
      {
        "name": "_transform_json_schema_to_k8s_crd",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": "json_schema",
              "type": "Dict[str, Any]"
            },
            {
              "name": "is_output_schema",
              "type": "bool"
            },
            {
              "name": "mcp_tool_name",
              "type": "Optional[str]"
            }
          ],
          "return_type": "KagentCRDSchema"
        },
        "docstring": "Converts a JSON Schema (Draft 7) to a Kubernetes CRD OpenAPI v3 compatible schema structure.\nThis is a complex task. This implementation will be a simplified version for P0.\n- Removes unsupported keywords ($schema, $id).\n- Renames fields to camelCase if properties exist.\n- Recursively processes nested schemas (properties, items).",
        "dependencies": []
      },
      {
        "name": "transform_node",
        "signature": {
          "args": [
            {
              "name": "node",
              "type": "Dict[str, Any]"
            }
          ],
          "return_type": "Dict[str, Any]"
        },
        "docstring": null,
        "dependencies": []
      }
    ],
    "src/mcp_vacuum/server.py": [
      {
        "name": "parse_auth_method",
        "signature": {
          "args": [
            {
              "name": "cls",
              "type": null
            },
            {
              "name": "v",
              "type": null
            }
          ],
          "return_type": null
        },
        "docstring": "Parse auth method from string if needed.",
        "dependencies": []
      },
      {
        "name": "validate_endpoint",
        "signature": {
          "args": [
            {
              "name": "cls",
              "type": null
            },
            {
              "name": "v",
              "type": null
            }
          ],
          "return_type": null
        },
        "docstring": "Validate endpoint URL format.",
        "dependencies": []
      },
      {
        "name": "host",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "str"
        },
        "docstring": "Get the host from endpoint.",
        "dependencies": []
      },
      {
        "name": "port",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "int"
        },
        "docstring": "Get the port from endpoint.",
        "dependencies": []
      },
      {
        "name": "is_secure",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "bool"
        },
        "docstring": "Check if the server uses HTTPS.",
        "dependencies": []
      },
      {
        "name": "requires_auth",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "bool"
        },
        "docstring": "Check if server requires authentication.",
        "dependencies": []
      },
      {
        "name": "is_authenticated",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "bool"
        },
        "docstring": "Check if server is authenticated.",
        "dependencies": []
      },
      {
        "name": "update_status",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": "status",
              "type": "ServerStatus"
            }
          ],
          "return_type": "None"
        },
        "docstring": "Update server status.",
        "dependencies": []
      },
      {
        "name": "set_auth_credentials",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": "credentials",
              "type": "AuthCredentials"
            }
          ],
          "return_type": "None"
        },
        "docstring": "Set authentication credentials.",
        "dependencies": []
      },
      {
        "name": "set_capabilities",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": "capabilities",
              "type": "ServerCapabilities"
            }
          ],
          "return_type": "None"
        },
        "docstring": "Set server capabilities.",
        "dependencies": []
      },
      {
        "name": "add_metadata",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": "key",
              "type": "str"
            },
            {
              "name": "value",
              "type": "str"
            }
          ],
          "return_type": "None"
        },
        "docstring": "Add metadata to the server.",
        "dependencies": []
      },
      {
        "name": "get_security_assessment",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "Dict[str, bool]"
        },
        "docstring": "Get security assessment of the server.",
        "dependencies": []
      },
      {
        "name": "to_dict",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "dict"
        },
        "docstring": "Convert server to dictionary representation.",
        "dependencies": []
      },
      {
        "name": "from_dict",
        "signature": {
          "args": [
            {
              "name": "cls",
              "type": null
            },
            {
              "name": "data",
              "type": "dict"
            }
          ],
          "return_type": "'MCPServer'"
        },
        "docstring": "Create server from dictionary representation.",
        "dependencies": []
      }
    ],
    "src/mcp_vacuum/utils/resilience.py": [
      {
        "name": "__init__",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": "message",
              "type": "str"
            },
            {
              "name": "remaining_time",
              "type": "float"
            }
          ],
          "return_type": null
        },
        "docstring": null,
        "dependencies": []
      },
      {
        "name": "__init__",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": "failure_threshold",
              "type": "int"
            },
            {
              "name": "recovery_timeout_seconds",
              "type": "float"
            },
            {
              "name": "half_open_max_successes",
              "type": "int"
            },
            {
              "name": "name",
              "type": "Optional[str]"
            }
          ],
          "return_type": null
        },
        "docstring": null,
        "dependencies": []
      },
      {
        "name": "state",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "CircuitBreakerState"
        },
        "docstring": null,
        "dependencies": []
      }
    ],
    "tests/adk/test_discovery_agent.py": [
      {
        "name": "app_config_adk",
        "signature": {
          "args": [],
          "return_type": null
        },
        "docstring": null,
        "dependencies": []
      },
      {
        "name": "mock_parent_logger",
        "signature": {
          "args": [],
          "return_type": null
        },
        "docstring": null,
        "dependencies": []
      },
      {
        "name": "output_queue",
        "signature": {
          "args": [],
          "return_type": null
        },
        "docstring": null,
        "dependencies": []
      },
      {
        "name": "mock_discovery_service",
        "signature": {
          "args": [],
          "return_type": null
        },
        "docstring": null,
        "dependencies": []
      },
      {
        "name": "discovery_agent",
        "signature": {
          "args": [
            {
              "name": "MockDiscoveryServiceCls",
              "type": null
            },
            {
              "name": "app_config_adk",
              "type": null
            },
            {
              "name": "mock_parent_logger",
              "type": null
            },
            {
              "name": "output_queue",
              "type": null
            },
            {
              "name": "mock_discovery_service",
              "type": null
            }
          ],
          "return_type": null
        },
        "docstring": null,
        "dependencies": []
      }
    ],
    "tests/test_config.py": [
      {
        "name": "test_config_from_env",
        "signature": {
          "args": [
            {
              "name": "monkeypatch",
              "type": null
            }
          ],
          "return_type": null
        },
        "docstring": "Test loading configuration from environment variables.",
        "dependencies": []
      },
      {
        "name": "test_config_defaults",
        "signature": {
          "args": [],
          "return_type": null
        },
        "docstring": "Test default configuration values for new and existing fields.",
        "dependencies": []
      },
      {
        "name": "test_config_from_file",
        "signature": {
          "args": [
            {
              "name": "tmp_path",
              "type": null
            }
          ],
          "return_type": null
        },
        "docstring": "Test loading configuration from a JSON file.",
        "dependencies": [
          "json"
        ]
      },
      {
        "name": "test_partial_config_from_file",
        "signature": {
          "args": [
            {
              "name": "tmp_path",
              "type": null
            }
          ],
          "return_type": null
        },
        "docstring": "Test loading partial configuration from a file, defaults should apply.",
        "dependencies": [
          "json"
        ]
      }
    ],
    "tests/test_discovery_service.py": [
      {
        "name": "app_config_mdns_enabled",
        "signature": {
          "args": [],
          "return_type": null
        },
        "docstring": null,
        "dependencies": []
      },
      {
        "name": "discovery_service",
        "signature": {
          "args": [
            {
              "name": "app_config_mdns_enabled",
              "type": null
            }
          ],
          "return_type": null
        },
        "docstring": null,
        "dependencies": []
      },
      {
        "name": "MockAsyncServiceInfo",
        "signature": {
          "args": [],
          "return_type": null
        },
        "docstring": "Mocks zeroconf.asyncio.AsyncServiceInfo.",
        "dependencies": []
      },
      {
        "name": "__init__",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": "type_",
              "type": "str"
            },
            {
              "name": "name",
              "type": "str"
            }
          ],
          "return_type": null
        },
        "docstring": null,
        "dependencies": []
      },
      {
        "name": "parsed_addresses",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": "version",
              "type": null
            }
          ],
          "return_type": "List[str]"
        },
        "docstring": null,
        "dependencies": []
      },
      {
        "name": "parsed_addresses_by_version",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": "version",
              "type": "int"
            }
          ],
          "return_type": "List[str]"
        },
        "docstring": null,
        "dependencies": []
      },
      {
        "name": "MockAsyncServiceBrowser",
        "signature": {
          "args": [],
          "return_type": null
        },
        "docstring": "Mocks zeroconf.asyncio.AsyncServiceBrowser.",
        "dependencies": []
      },
      {
        "name": "__init__",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": "aiozc_zeroconf",
              "type": null
            },
            {
              "name": "service_types",
              "type": null
            },
            {
              "name": "handlers",
              "type": null
            }
          ],
          "return_type": null
        },
        "docstring": null,
        "dependencies": []
      },
      {
        "name": "MockAsyncZeroconf",
        "signature": {
          "args": [],
          "return_type": null
        },
        "docstring": "Mocks zeroconf.asyncio.AsyncZeroconf.",
        "dependencies": []
      },
      {
        "name": "__init__",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": null
        },
        "docstring": null,
        "dependencies": []
      }
    ],
    "tests/test_environment.py": [
      {
        "name": "test_python_version",
        "signature": {
          "args": [],
          "return_type": null
        },
        "docstring": "Ensure we're running Python 3.12+.",
        "dependencies": []
      },
      {
        "name": "test_project_structure",
        "signature": {
          "args": [],
          "return_type": null
        },
        "docstring": "Verify basic project structure.",
        "dependencies": []
      },
      {
        "name": "test_development_tools",
        "signature": {
          "args": [],
          "return_type": null
        },
        "docstring": "Verify development tools are installed.",
        "dependencies": [
          "ruff",
          "mypy",
          "pytest",
          "black"
        ]
      }
    ],
    "tests/test_http_mcp_client.py": [
      {
        "name": "app_config",
        "signature": {
          "args": [],
          "return_type": null
        },
        "docstring": null,
        "dependencies": []
      },
      {
        "name": "service_record",
        "signature": {
          "args": [],
          "return_type": null
        },
        "docstring": null,
        "dependencies": []
      },
      {
        "name": "mock_aiohttp_session_post",
        "signature": {
          "args": [],
          "return_type": null
        },
        "docstring": "Fixture to provide a mock for aiohttp.ClientSession.post method.",
        "dependencies": []
      }
    ],
    "tests/test_models.py": [
      {
        "name": "test_oauth2token_is_expired",
        "signature": {
          "args": [],
          "return_type": null
        },
        "docstring": "Test OAuth2Token.is_expired property.",
        "dependencies": []
      },
      {
        "name": "test_pkce_challenge_validation",
        "signature": {
          "args": [],
          "return_type": null
        },
        "docstring": "Test PKCEChallenge model validation (though it's mostly for data holding).",
        "dependencies": []
      },
      {
        "name": "test_mcp_service_record_creation",
        "signature": {
          "args": [],
          "return_type": null
        },
        "docstring": "Test basic creation and HttpUrl validation for MCPServiceRecord.",
        "dependencies": []
      },
      {
        "name": "test_mcp_tool_creation",
        "signature": {
          "args": [],
          "return_type": null
        },
        "docstring": "Test MCPTool creation with required schema fields.",
        "dependencies": []
      },
      {
        "name": "test_kagent_tool_creation",
        "signature": {
          "args": [],
          "return_type": null
        },
        "docstring": "Test KagentTool creation with nested models.",
        "dependencies": []
      },
      {
        "name": "test_kagent_crd_schema_extra_fields",
        "signature": {
          "args": [],
          "return_type": null
        },
        "docstring": "Test KagentCRDSchema allows extra fields (as JSON schema can be flexible).",
        "dependencies": []
      },
      {
        "name": "test_enum_usage_in_models",
        "signature": {
          "args": [],
          "return_type": null
        },
        "docstring": "Test that enums are correctly used and validated in models.",
        "dependencies": []
      },
      {
        "name": "test_mcp_capability_type",
        "signature": {
          "args": [],
          "return_type": null
        },
        "docstring": null,
        "dependencies": []
      },
      {
        "name": "test_model_field_defaults",
        "signature": {
          "args": [],
          "return_type": null
        },
        "docstring": "Test default values for various model fields.",
        "dependencies": []
      },
      {
        "name": "test_validation_result",
        "signature": {
          "args": [],
          "return_type": null
        },
        "docstring": null,
        "dependencies": []
      }
    ],
    "tests/test_oauth_client.py": [
      {
        "name": "app_config",
        "signature": {
          "args": [],
          "return_type": null
        },
        "docstring": null,
        "dependencies": []
      },
      {
        "name": "oauth_client_config_data",
        "signature": {
          "args": [],
          "return_type": null
        },
        "docstring": null,
        "dependencies": []
      },
      {
        "name": "oauth_client",
        "signature": {
          "args": [
            {
              "name": "oauth_client_config_data",
              "type": null
            },
            {
              "name": "app_config",
              "type": null
            }
          ],
          "return_type": null
        },
        "docstring": null,
        "dependencies": []
      }
    ],
    "tests/test_pkce.py": [
      {
        "name": "test_generate_pkce_s256",
        "signature": {
          "args": [],
          "return_type": null
        },
        "docstring": "Test S256 PKCE challenge generation.",
        "dependencies": []
      },
      {
        "name": "test_generate_pkce_plain",
        "signature": {
          "args": [],
          "return_type": null
        },
        "docstring": "Test 'plain' PKCE challenge generation.",
        "dependencies": []
      },
      {
        "name": "test_generate_pkce_unsupported_method",
        "signature": {
          "args": [],
          "return_type": null
        },
        "docstring": "Test error handling for unsupported challenge methods.",
        "dependencies": []
      },
      {
        "name": "test_pkce_verifier_length_generation",
        "signature": {
          "args": [],
          "return_type": null
        },
        "docstring": "Test that verifiers of different valid lengths can be implicitly generated by the model if not the function.",
        "dependencies": []
      }
    ],
    "tests/test_schema_converter_service.py": [
      {
        "name": "app_config",
        "signature": {
          "args": [],
          "return_type": null
        },
        "docstring": null,
        "dependencies": []
      },
      {
        "name": "converter_service",
        "signature": {
          "args": [
            {
              "name": "app_config",
              "type": null
            }
          ],
          "return_type": null
        },
        "docstring": null,
        "dependencies": []
      },
      {
        "name": "sample_mcp_tool",
        "signature": {
          "args": [],
          "return_type": null
        },
        "docstring": null,
        "dependencies": []
      },
      {
        "name": "sample_server_info",
        "signature": {
          "args": [],
          "return_type": null
        },
        "docstring": null,
        "dependencies": []
      },
      {
        "name": "test_sanitize_k8s_name",
        "signature": {
          "args": [
            {
              "name": "converter_service",
              "type": "SchemaConverterService"
            }
          ],
          "return_type": null
        },
        "docstring": null,
        "dependencies": []
      },
      {
        "name": "test_to_camel_case",
        "signature": {
          "args": [
            {
              "name": "converter_service",
              "type": "SchemaConverterService"
            }
          ],
          "return_type": null
        },
        "docstring": null,
        "dependencies": []
      },
      {
        "name": "test_categorize_tool",
        "signature": {
          "args": [
            {
              "name": "converter_service",
              "type": "SchemaConverterService"
            },
            {
              "name": "sample_mcp_tool",
              "type": null
            }
          ],
          "return_type": null
        },
        "docstring": null,
        "dependencies": []
      },
      {
        "name": "test_assess_risk_level",
        "signature": {
          "args": [
            {
              "name": "converter_service",
              "type": "SchemaConverterService"
            }
          ],
          "return_type": null
        },
        "docstring": null,
        "dependencies": []
      },
      {
        "name": "test_transform_json_schema_to_k8s_crd_input_params",
        "signature": {
          "args": [
            {
              "name": "converter_service",
              "type": "SchemaConverterService"
            },
            {
              "name": "mcp_schema",
              "type": null
            },
            {
              "name": "expected_k8s_props",
              "type": null
            },
            {
              "name": "sample_mcp_tool",
              "type": null
            }
          ],
          "return_type": null
        },
        "docstring": "Test input schema transformation (must result in an object schema for parameters).",
        "dependencies": []
      },
      {
        "name": "test_transform_json_schema_to_k8s_crd_output_schema",
        "signature": {
          "args": [
            {
              "name": "converter_service",
              "type": "SchemaConverterService"
            },
            {
              "name": "sample_mcp_tool",
              "type": null
            }
          ],
          "return_type": null
        },
        "docstring": "Test output schema transformation (can be non-object).",
        "dependencies": []
      }
    ],
    "tests/test_token_manager.py": [
      {
        "name": "app_config",
        "signature": {
          "args": [],
          "return_type": null
        },
        "docstring": null,
        "dependencies": []
      },
      {
        "name": "mock_token_storage",
        "signature": {
          "args": [],
          "return_type": null
        },
        "docstring": null,
        "dependencies": []
      },
      {
        "name": "token_manager",
        "signature": {
          "args": [
            {
              "name": "app_config",
              "type": null
            },
            {
              "name": "mock_token_storage",
              "type": null
            }
          ],
          "return_type": null
        },
        "docstring": null,
        "dependencies": []
      },
      {
        "name": "sample_server_info",
        "signature": {
          "args": [],
          "return_type": null
        },
        "docstring": null,
        "dependencies": []
      }
    ],
    "tests/test_token_storage.py": [
      {
        "name": "auth_config_keyring",
        "signature": {
          "args": [],
          "return_type": null
        },
        "docstring": null,
        "dependencies": []
      },
      {
        "name": "mock_keyring_module",
        "signature": {
          "args": [],
          "return_type": null
        },
        "docstring": null,
        "dependencies": []
      },
      {
        "name": "set_password_mock",
        "signature": {
          "args": [
            {
              "name": "service",
              "type": null
            },
            {
              "name": "username",
              "type": null
            },
            {
              "name": "password",
              "type": null
            }
          ],
          "return_type": null
        },
        "docstring": null,
        "dependencies": []
      },
      {
        "name": "get_password_mock",
        "signature": {
          "args": [
            {
              "name": "service",
              "type": null
            },
            {
              "name": "username",
              "type": null
            }
          ],
          "return_type": null
        },
        "docstring": null,
        "dependencies": []
      },
      {
        "name": "delete_password_mock",
        "signature": {
          "args": [
            {
              "name": "service",
              "type": null
            },
            {
              "name": "username",
              "type": null
            }
          ],
          "return_type": null
        },
        "docstring": null,
        "dependencies": []
      },
      {
        "name": "test_get_token_storage_factory",
        "signature": {
          "args": [
            {
              "name": "auth_config_keyring",
              "type": null
            }
          ],
          "return_type": null
        },
        "docstring": "Test the get_token_storage factory function.",
        "dependencies": []
      }
    ]
  },
  "refactor/oauth-event-handlers": {
    "src/mcp_vacuum/__main__.py": [
      {
        "name": "cli",
        "signature": {
          "args": [
            {
              "name": "ctx",
              "type": "click.Context"
            },
            {
              "name": "config_file",
              "type": "Optional[str]"
            },
            {
              "name": "log_level",
              "type": "Optional[str]"
            },
            {
              "name": "log_format",
              "type": "Optional[str]"
            }
          ],
          "return_type": "None"
        },
        "docstring": "MCP Vacuum - Discovers MCP servers, authenticates, and converts schemas.",
        "dependencies": [
          "traceback"
        ]
      },
      {
        "name": "discover",
        "signature": {
          "args": [
            {
              "name": "ctx",
              "type": "click.Context"
            },
            {
              "name": "networks",
              "type": "List[str]"
            },
            {
              "name": "output_file",
              "type": "Optional[str]"
            }
          ],
          "return_type": "None"
        },
        "docstring": "Discovers MCP servers, authenticates, and generates Kagent schemas.",
        "dependencies": []
      },
      {
        "name": "version",
        "signature": {
          "args": [
            {
              "name": "ctx",
              "type": "click.Context"
            }
          ],
          "return_type": "None"
        },
        "docstring": "Show version information.",
        "dependencies": [
          null
        ]
      },
      {
        "name": "config_show",
        "signature": {
          "args": [
            {
              "name": "ctx",
              "type": "click.Context"
            }
          ],
          "return_type": "None"
        },
        "docstring": "Show current configuration.",
        "dependencies": [
          "json"
        ]
      }
    ],
    "src/mcp_vacuum/adk/auth_agent.py": [
      {
        "name": "__init__",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": "server_id",
              "type": "str"
            },
            {
              "name": "success",
              "type": "bool"
            },
            {
              "name": "auth_data",
              "type": "Optional[Dict[str, Any]]"
            },
            {
              "name": "error_message",
              "type": "Optional[str]"
            }
          ],
          "return_type": null
        },
        "docstring": null,
        "dependencies": []
      },
      {
        "name": "__repr__",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": null
        },
        "docstring": null,
        "dependencies": []
      },
      {
        "name": "__init__",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": "app_config",
              "type": "Config"
            },
            {
              "name": "parent_logger",
              "type": "structlog.BoundLogger"
            },
            {
              "name": "output_queue",
              "type": "asyncio.Queue"
            }
          ],
          "return_type": null
        },
        "docstring": null,
        "dependencies": []
      }
    ],
    "src/mcp_vacuum/adk/auth_handler.py": [
      {
        "name": "__init__",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": "queue",
              "type": "asyncio.Queue"
            },
            {
              "name": "mcp_client_agent",
              "type": "Any"
            },
            {
              "name": "conversion_agent",
              "type": "Any"
            },
            {
              "name": "discovered_servers_info",
              "type": "Dict[str, Any]"
            },
            {
              "name": "authenticated_server_details",
              "type": "Dict[str, Any]"
            },
            {
              "name": "logger",
              "type": "Optional[structlog.BoundLogger]"
            }
          ],
          "return_type": "None"
        },
        "docstring": "Initialize the AuthEventProcessor.\n\nArgs:\n    queue: Queue containing authentication events to process\n    mcp_client_agent: Reference to the MCP client agent\n    conversion_agent: Reference to the conversion agent\n    discovered_servers_info: Dict of discovered server information\n    authenticated_server_details: Dict to track authenticated servers\n    logger: Optional logger instance\n    **dependencies: Additional dependencies required for processing",
        "dependencies": []
      }
    ],
    "src/mcp_vacuum/adk/base.py": [
      {
        "name": "__init__",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": "agent_name",
              "type": "str"
            },
            {
              "name": "app_config",
              "type": "Config"
            },
            {
              "name": "parent_logger",
              "type": "Optional[structlog.BoundLogger]"
            }
          ],
          "return_type": null
        },
        "docstring": "Args:\n    agent_name: A unique name for this agent instance.\n    app_config: The global application configuration.\n    parent_logger: Optional logger from a parent agent for hierarchical logging.\n    **kwargs: Additional arguments for the underlying ADK BaseAgent.",
        "dependencies": []
      }
    ],
    "src/mcp_vacuum/adk/conversion_agent.py": [
      {
        "name": "__init__",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": "server_id",
              "type": "str"
            },
            {
              "name": "success",
              "type": "bool"
            },
            {
              "name": "kagent_tools_schemas",
              "type": "Optional[List[KagentTool]]"
            },
            {
              "name": "original_tool_count",
              "type": "Optional[int]"
            },
            {
              "name": "error_message",
              "type": "Optional[str]"
            }
          ],
          "return_type": null
        },
        "docstring": null,
        "dependencies": []
      },
      {
        "name": "__repr__",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": null
        },
        "docstring": null,
        "dependencies": []
      },
      {
        "name": "__init__",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": "app_config",
              "type": "Config"
            },
            {
              "name": "parent_logger",
              "type": "structlog.BoundLogger"
            },
            {
              "name": "output_queue",
              "type": "asyncio.Queue"
            }
          ],
          "return_type": null
        },
        "docstring": null,
        "dependencies": []
      }
    ],
    "src/mcp_vacuum/adk/conversion_handler.py": [
      {
        "name": "__init__",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": "queue",
              "type": "asyncio.Queue"
            },
            {
              "name": "server_kagent_schemas",
              "type": "Dict[str, Any]"
            },
            {
              "name": "logger",
              "type": "Optional[structlog.BoundLogger]"
            }
          ],
          "return_type": "None"
        },
        "docstring": "Initialize the ConversionEventProcessor.\n\nArgs:\n    queue: Queue containing schema conversion events to process\n    server_kagent_schemas: Dict to store converted schemas by server ID\n    logger: Optional logger instance\n    **dependencies: Additional dependencies required for processing",
        "dependencies": []
      }
    ],
    "src/mcp_vacuum/adk/discovery_agent.py": [
      {
        "name": "__init__",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": "server_info",
              "type": "MCPServiceRecord"
            }
          ],
          "return_type": null
        },
        "docstring": null,
        "dependencies": []
      },
      {
        "name": "__repr__",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": null
        },
        "docstring": null,
        "dependencies": []
      },
      {
        "name": "__init__",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": "app_config",
              "type": "Config"
            },
            {
              "name": "parent_logger",
              "type": "structlog.BoundLogger"
            },
            {
              "name": "output_queue",
              "type": "asyncio.Queue"
            }
          ],
          "return_type": null
        },
        "docstring": null,
        "dependencies": []
      }
    ],
    "src/mcp_vacuum/adk/discovery_handler.py": [
      {
        "name": "__init__",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": "queue",
              "type": "asyncio.Queue"
            },
            {
              "name": "auth_agent",
              "type": "Any"
            },
            {
              "name": "discovered_servers_info",
              "type": "Dict[str, Any]"
            },
            {
              "name": "logger",
              "type": "Optional[structlog.BoundLogger]"
            }
          ],
          "return_type": "None"
        },
        "docstring": "Initialize the DiscoveryEventProcessor.\n\nArgs:\n    queue: Queue containing discovery events to process\n    auth_agent: Reference to the authentication agent for delegating auth\n    discovered_servers_info: Dict to track discovered server information\n    logger: Optional logger instance\n    **dependencies: Additional dependencies required for processing",
        "dependencies": []
      }
    ],
    "src/mcp_vacuum/adk/mcp_client_agent.py": [
      {
        "name": "__init__",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": "app_config",
              "type": "Config"
            },
            {
              "name": "parent_logger",
              "type": "structlog.BoundLogger"
            },
            {
              "name": "auth_agent_ref",
              "type": "AuthenticationAgent"
            }
          ],
          "return_type": null
        },
        "docstring": null,
        "dependencies": []
      }
    ],
    "src/mcp_vacuum/adk/orchestration_agent.py": [
      {
        "name": "__init__",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": "target_networks",
              "type": "Optional[List[str]]"
            }
          ],
          "return_type": null
        },
        "docstring": null,
        "dependencies": []
      },
      {
        "name": "__init__",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": "server_id",
              "type": "str"
            },
            {
              "name": "server_info",
              "type": "Dict[str, Any]"
            }
          ],
          "return_type": null
        },
        "docstring": null,
        "dependencies": []
      },
      {
        "name": "__init__",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": "server_id",
              "type": "str"
            },
            {
              "name": "mcp_tools_data",
              "type": "List[Dict[str, Any]]"
            }
          ],
          "return_type": null
        },
        "docstring": null,
        "dependencies": []
      },
      {
        "name": "__init__",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": "app_config",
              "type": "Config"
            }
          ],
          "return_type": null
        },
        "docstring": null,
        "dependencies": []
      },
      {
        "name": "_setup_global_logging",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "None"
        },
        "docstring": null,
        "dependencies": [
          "logging"
        ]
      },
      {
        "name": "get_summary",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "Dict[str, int]"
        },
        "docstring": null,
        "dependencies": []
      }
    ],
    "src/mcp_vacuum/auth/dynamic_registration.py": [
      {
        "name": "__init__",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": "app_config",
              "type": "Config"
            },
            {
              "name": "session",
              "type": "Optional[aiohttp.ClientSession]"
            }
          ],
          "return_type": null
        },
        "docstring": "Initializes the DynamicClientRegistrar.\n\nArgs:\n    app_config: Global application configuration.\n    session: An optional shared aiohttp.ClientSession.",
        "dependencies": []
      }
    ],
    "src/mcp_vacuum/auth/oauth_client.py": [
      {
        "name": "__init__",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": "client_config",
              "type": "OAuth2ClientConfig"
            },
            {
              "name": "app_config",
              "type": "Config"
            },
            {
              "name": "session",
              "type": "Optional[aiohttp.ClientSession]"
            }
          ],
          "return_type": null
        },
        "docstring": "Initializes the OAuth2 client.\n\nArgs:\n    client_config: Configuration specific to this OAuth client instance (client_id, endpoints, etc.).\n    app_config: Global application configuration, used for HTTP client settings.\n    session: An optional shared aiohttp.ClientSession. If None, one will be created.",
        "dependencies": []
      },
      {
        "name": "create_authorization_url",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": "state",
              "type": "str"
            },
            {
              "name": "pkce",
              "type": "PKCEChallenge"
            },
            {
              "name": "extra_params",
              "type": "Optional[Dict[str, str]]"
            }
          ],
          "return_type": "Tuple[str, str, str]"
        },
        "docstring": "Creates the authorization URL to redirect the user to.\n\nArgs:\n    state: An opaque value used to maintain state between the request and callback.\n    pkce: The PKCEChallenge object containing verifier, challenge, and method.\n    extra_params: Additional query parameters to include in the authorization request.\n\nReturns:\n    A tuple containing:\n    - The full authorization URL.\n    - The state parameter used.\n    - The PKCE code verifier.",
        "dependencies": []
      },
      {
        "name": "_prepare_token_request",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": "grant_type",
              "type": "str"
            },
            {
              "name": "token_request_data",
              "type": "TokenRequest"
            }
          ],
          "return_type": "Tuple[dict, dict, aiohttp.ClientTimeout]"
        },
        "docstring": "Prepares the token request payload, headers and timeout settings.\n\nArgs:\n    grant_type: The OAuth2 grant type (e.g. 'authorization_code' or 'refresh_token').\n    token_request_data: The token request data object.\n\nReturns:\n    A tuple containing (payload, headers, timeout) for the token request.",
        "dependencies": []
      },
      {
        "name": "_parse_token_response",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": "token_data",
              "type": "dict"
            },
            {
              "name": "existing_refresh_token",
              "type": "Optional[str]"
            }
          ],
          "return_type": "OAuth2Token"
        },
        "docstring": "Parses and validates the token response data.\n\nArgs:\n    token_data: The raw token response data.\n    existing_refresh_token: The current refresh token to preserve if a new one isn't provided.\n\nReturns:\n    An OAuth2Token instance.\n\nRaises:\n    MCPAuthError: If the token data is invalid or malformed.",
        "dependencies": []
      }
    ],
    "src/mcp_vacuum/auth/pkce.py": [
      {
        "name": "generate_pkce_challenge_pair",
        "signature": {
          "args": [
            {
              "name": "code_challenge_method",
              "type": "str"
            }
          ],
          "return_type": "PKCEChallenge"
        },
        "docstring": "Generates a PKCE code_verifier and a corresponding code_challenge.\n\nArgs:\n    code_challenge_method: The method used to generate the challenge.\n                           Currently supports \"S256\" or \"plain\".\n\nReturns:\n    A PKCEChallenge object containing the verifier, challenge, and method.\n\nRaises:\n    ValueError: If an unsupported code_challenge_method is provided.",
        "dependencies": []
      }
    ],
    "src/mcp_vacuum/auth/token_manager.py": [
      {
        "name": "__init__",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": "app_config",
              "type": "Config"
            },
            {
              "name": "token_storage",
              "type": "Optional[BaseTokenStorage]"
            }
          ],
          "return_type": null
        },
        "docstring": "Initializes the TokenManager.\n\nArgs:\n    app_config: The global application configuration.\n    token_storage: An instance of a token storage backend. If None, one will be created\n                   based on app_config.auth.",
        "dependencies": []
      }
    ],
    "src/mcp_vacuum/auth/token_storage.py": [
      {
        "name": "__init__",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": "auth_config",
              "type": "AuthConfig"
            }
          ],
          "return_type": null
        },
        "docstring": null,
        "dependencies": []
      },
      {
        "name": "_get_key",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": "server_id",
              "type": "str"
            },
            {
              "name": "suffix",
              "type": "str"
            }
          ],
          "return_type": "str"
        },
        "docstring": null,
        "dependencies": []
      },
      {
        "name": "__init__",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": "auth_config",
              "type": "AuthConfig"
            },
            {
              "name": "encryption_key",
              "type": "bytes"
            }
          ],
          "return_type": null
        },
        "docstring": null,
        "dependencies": []
      },
      {
        "name": "derive_key_from_password",
        "signature": {
          "args": [
            {
              "name": "password",
              "type": "str"
            },
            {
              "name": "salt",
              "type": "bytes"
            }
          ],
          "return_type": "bytes"
        },
        "docstring": "Derives an encryption key from a password using PBKDF2HMAC-SHA256.",
        "dependencies": []
      },
      {
        "name": "get_token_storage",
        "signature": {
          "args": [
            {
              "name": "auth_config",
              "type": "AuthConfig"
            }
          ],
          "return_type": "BaseTokenStorage"
        },
        "docstring": "Factory function to get a token storage instance based on configuration.\nRequires ENCRYPTION_KEY_ENV_VAR or similar for EncryptedFileTokenStorage if used.",
        "dependencies": []
      }
    ],
    "src/mcp_vacuum/config.py": [
      {
        "name": "from_file",
        "signature": {
          "args": [
            {
              "name": "cls",
              "type": null
            },
            {
              "name": "file_path",
              "type": "Path"
            }
          ],
          "return_type": "'Config'"
        },
        "docstring": "Create configuration strictly from a JSON file.\nNote: This does not layer with environment variables. For layered loading,\npydantic-settings offers other mechanisms if env_file in SettingsConfigDict is not sufficient.",
        "dependencies": []
      }
    ],
    "src/mcp_vacuum/discovery/discovery_service.py": [
      {
        "name": "__init__",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": "app_config",
              "type": "Config"
            }
          ],
          "return_type": null
        },
        "docstring": null,
        "dependencies": []
      },
      {
        "name": "get_cached_server",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": "server_id",
              "type": "str"
            }
          ],
          "return_type": "Optional[MCPServiceRecord]"
        },
        "docstring": "Returns a cached MCPServiceRecord if found and not expired.",
        "dependencies": []
      },
      {
        "name": "get_all_cached_servers",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "List[MCPServiceRecord]"
        },
        "docstring": "Returns all currently cached and valid (non-expired TTL) MCPServiceRecords.",
        "dependencies": []
      }
    ],
    "src/mcp_vacuum/mcp_client/base_client.py": [
      {
        "name": "generate_jsonrpc_request",
        "signature": {
          "args": [
            {
              "name": "method",
              "type": "str"
            },
            {
              "name": "params",
              "type": "Optional[Dict[str, Any]]"
            },
            {
              "name": "request_id",
              "type": "Optional[Union[str, int]]"
            }
          ],
          "return_type": "Dict[str, Any]"
        },
        "docstring": "Generates a JSONRPC 2.0 request dictionary.",
        "dependencies": []
      },
      {
        "name": "__init__",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": "service_record",
              "type": "MCPServiceRecord"
            },
            {
              "name": "config",
              "type": "Config"
            },
            {
              "name": "aiohttp_session",
              "type": "Optional[aiohttp.ClientSession]"
            }
          ],
          "return_type": null
        },
        "docstring": null,
        "dependencies": []
      },
      {
        "name": "get_session",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "Optional[aiohttp.ClientSession]"
        },
        "docstring": "Returns the aiohttp session if used by the client (primarily for HTTP-based transports).",
        "dependencies": []
      }
    ],
    "src/mcp_vacuum/mcp_client/exceptions.py": [
      {
        "name": "__init__",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": "message",
              "type": "str"
            },
            {
              "name": "error_code",
              "type": "int"
            },
            {
              "name": "error_data",
              "type": "dict"
            }
          ],
          "return_type": null
        },
        "docstring": null,
        "dependencies": []
      },
      {
        "name": "__init__",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": "tool_name",
              "type": "str"
            },
            {
              "name": "message",
              "type": "str"
            },
            {
              "name": "error_code",
              "type": "int"
            },
            {
              "name": "error_data",
              "type": "dict"
            }
          ],
          "return_type": null
        },
        "docstring": null,
        "dependencies": []
      }
    ],
    "src/mcp_vacuum/mcp_client/http_client.py": [
      {
        "name": "__init__",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": "service_record",
              "type": "MCPServiceRecord"
            },
            {
              "name": "config",
              "type": "Config"
            },
            {
              "name": "aiohttp_session",
              "type": "Optional[aiohttp.ClientSession]"
            }
          ],
          "return_type": null
        },
        "docstring": null,
        "dependencies": []
      }
    ],
    "src/mcp_vacuum/models/auth.py": [
      {
        "name": "is_expired",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "bool"
        },
        "docstring": "Check if token is expired with a 60-second buffer.",
        "dependencies": []
      },
      {
        "name": "expires_at",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "Optional[float]"
        },
        "docstring": null,
        "dependencies": []
      }
    ],
    "src/mcp_vacuum/schema_gen/schema_converter_service.py": [
      {
        "name": "has_errors",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "bool"
        },
        "docstring": null,
        "dependencies": []
      },
      {
        "name": "__init__",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": "app_config",
              "type": "Config"
            }
          ],
          "return_type": null
        },
        "docstring": null,
        "dependencies": []
      },
      {
        "name": "_sanitize_k8s_name",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": "name",
              "type": "str"
            },
            {
              "name": "max_length",
              "type": "int"
            }
          ],
          "return_type": "str"
        },
        "docstring": "Sanitizes a string to be a Kubernetes-compliant name.",
        "dependencies": []
      },
      {
        "name": "_to_camel_case",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": "snake_str",
              "type": "str"
            }
          ],
          "return_type": "str"
        },
        "docstring": "Converts snake_case or kebab-case to camelCase.",
        "dependencies": []
      },
      {
        "name": "_categorize_tool",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": "mcp_tool",
              "type": "MCPTool"
            }
          ],
          "return_type": "ToolCategory"
        },
        "docstring": "Categorizes the tool based on name, description, schema (simplified).",
        "dependencies": []
      },
      {
        "name": "_assess_risk_level",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": "mcp_tool",
              "type": "MCPTool"
            },
            {
              "name": "category",
              "type": "ToolCategory"
            }
          ],
          "return_type": "RiskLevel"
        },
        "docstring": "Assesses risk level (simplified).",
        "dependencies": []
      },
      {
        "name": "_transform_json_schema_to_k8s_crd",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": "json_schema",
              "type": "Dict[str, Any]"
            },
            {
              "name": "is_output_schema",
              "type": "bool"
            },
            {
              "name": "mcp_tool_name",
              "type": "Optional[str]"
            }
          ],
          "return_type": "KagentCRDSchema"
        },
        "docstring": "Converts a JSON Schema (Draft 7) to a Kubernetes CRD OpenAPI v3 compatible schema structure.\nThis is a complex task. This implementation will be a simplified version for P0.\n- Removes unsupported keywords ($schema, $id).\n- Renames fields to camelCase if properties exist.\n- Recursively processes nested schemas (properties, items).",
        "dependencies": []
      },
      {
        "name": "transform_node",
        "signature": {
          "args": [
            {
              "name": "node",
              "type": "Dict[str, Any]"
            }
          ],
          "return_type": "Dict[str, Any]"
        },
        "docstring": null,
        "dependencies": []
      }
    ],
    "src/mcp_vacuum/server.py": [
      {
        "name": "parse_auth_method",
        "signature": {
          "args": [
            {
              "name": "cls",
              "type": null
            },
            {
              "name": "v",
              "type": null
            }
          ],
          "return_type": null
        },
        "docstring": "Parse auth method from string if needed.",
        "dependencies": []
      },
      {
        "name": "validate_endpoint",
        "signature": {
          "args": [
            {
              "name": "cls",
              "type": null
            },
            {
              "name": "v",
              "type": null
            }
          ],
          "return_type": null
        },
        "docstring": "Validate endpoint URL format.",
        "dependencies": []
      },
      {
        "name": "host",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "str"
        },
        "docstring": "Get the host from endpoint.",
        "dependencies": []
      },
      {
        "name": "port",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "int"
        },
        "docstring": "Get the port from endpoint.",
        "dependencies": []
      },
      {
        "name": "is_secure",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "bool"
        },
        "docstring": "Check if the server uses HTTPS.",
        "dependencies": []
      },
      {
        "name": "requires_auth",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "bool"
        },
        "docstring": "Check if server requires authentication.",
        "dependencies": []
      },
      {
        "name": "is_authenticated",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "bool"
        },
        "docstring": "Check if server is authenticated.",
        "dependencies": []
      },
      {
        "name": "update_status",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": "status",
              "type": "ServerStatus"
            }
          ],
          "return_type": "None"
        },
        "docstring": "Update server status.",
        "dependencies": []
      },
      {
        "name": "set_auth_credentials",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": "credentials",
              "type": "AuthCredentials"
            }
          ],
          "return_type": "None"
        },
        "docstring": "Set authentication credentials.",
        "dependencies": []
      },
      {
        "name": "set_capabilities",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": "capabilities",
              "type": "ServerCapabilities"
            }
          ],
          "return_type": "None"
        },
        "docstring": "Set server capabilities.",
        "dependencies": []
      },
      {
        "name": "add_metadata",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": "key",
              "type": "str"
            },
            {
              "name": "value",
              "type": "str"
            }
          ],
          "return_type": "None"
        },
        "docstring": "Add metadata to the server.",
        "dependencies": []
      },
      {
        "name": "get_security_assessment",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "Dict[str, bool]"
        },
        "docstring": "Get security assessment of the server.",
        "dependencies": []
      },
      {
        "name": "to_dict",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "dict"
        },
        "docstring": "Convert server to dictionary representation.",
        "dependencies": []
      },
      {
        "name": "from_dict",
        "signature": {
          "args": [
            {
              "name": "cls",
              "type": null
            },
            {
              "name": "data",
              "type": "dict"
            }
          ],
          "return_type": "'MCPServer'"
        },
        "docstring": "Create server from dictionary representation.",
        "dependencies": []
      }
    ],
    "src/mcp_vacuum/utils/resilience.py": [
      {
        "name": "__init__",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": "message",
              "type": "str"
            },
            {
              "name": "remaining_time",
              "type": "float"
            }
          ],
          "return_type": null
        },
        "docstring": null,
        "dependencies": []
      },
      {
        "name": "__init__",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": "failure_threshold",
              "type": "int"
            },
            {
              "name": "recovery_timeout_seconds",
              "type": "float"
            },
            {
              "name": "half_open_max_successes",
              "type": "int"
            },
            {
              "name": "name",
              "type": "Optional[str]"
            }
          ],
          "return_type": null
        },
        "docstring": null,
        "dependencies": []
      },
      {
        "name": "state",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "CircuitBreakerState"
        },
        "docstring": null,
        "dependencies": []
      }
    ],
    "task7_validation.py": [
      {
        "name": "validate_task_requirements",
        "signature": {
          "args": [],
          "return_type": null
        },
        "docstring": "Validate all Task 7 requirements have been met.",
        "dependencies": [
          "mcp_vacuum.server"
        ]
      }
    ],
    "tests/adk/test_conversion_agent.py": [
      {
        "name": "__init__",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": "settings",
              "type": "Any"
            }
          ],
          "return_type": null
        },
        "docstring": null,
        "dependencies": []
      },
      {
        "name": "__init__",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": null
        },
        "docstring": null,
        "dependencies": []
      },
      {
        "name": "logger",
        "signature": {
          "args": [],
          "return_type": null
        },
        "docstring": null,
        "dependencies": []
      },
      {
        "name": "output_queue",
        "signature": {
          "args": [],
          "return_type": null
        },
        "docstring": null,
        "dependencies": []
      },
      {
        "name": "test_init_with_fail_fast_true",
        "signature": {
          "args": [
            {
              "name": "logger",
              "type": null
            },
            {
              "name": "output_queue",
              "type": null
            }
          ],
          "return_type": null
        },
        "docstring": "Test ConversionAgent initialization with fail_fast_conversion=True.",
        "dependencies": []
      },
      {
        "name": "test_init_with_fail_fast_false",
        "signature": {
          "args": [
            {
              "name": "logger",
              "type": null
            },
            {
              "name": "output_queue",
              "type": null
            }
          ],
          "return_type": null
        },
        "docstring": "Test ConversionAgent initialization with fail_fast_conversion=False.",
        "dependencies": []
      },
      {
        "name": "test_init_with_fail_fast_missing",
        "signature": {
          "args": [
            {
              "name": "logger",
              "type": null
            },
            {
              "name": "output_queue",
              "type": null
            }
          ],
          "return_type": null
        },
        "docstring": "Test ConversionAgent initialization with missing fail_fast_conversion.",
        "dependencies": []
      },
      {
        "name": "test_init_with_fail_fast_invalid_type",
        "signature": {
          "args": [
            {
              "name": "logger",
              "type": null
            },
            {
              "name": "output_queue",
              "type": null
            }
          ],
          "return_type": null
        },
        "docstring": "Test ConversionAgent initialization with non-boolean fail_fast_conversion.",
        "dependencies": []
      },
      {
        "name": "test_init_with_agent_settings_none",
        "signature": {
          "args": [
            {
              "name": "logger",
              "type": null
            },
            {
              "name": "output_queue",
              "type": null
            }
          ],
          "return_type": null
        },
        "docstring": "Test ConversionAgent initialization with None agent_settings.",
        "dependencies": []
      }
    ],
    "tests/adk/test_discovery_agent.py": [
      {
        "name": "app_config_adk",
        "signature": {
          "args": [],
          "return_type": null
        },
        "docstring": null,
        "dependencies": []
      },
      {
        "name": "mock_parent_logger",
        "signature": {
          "args": [],
          "return_type": null
        },
        "docstring": null,
        "dependencies": []
      },
      {
        "name": "output_queue",
        "signature": {
          "args": [],
          "return_type": null
        },
        "docstring": null,
        "dependencies": []
      },
      {
        "name": "mock_discovery_service",
        "signature": {
          "args": [],
          "return_type": null
        },
        "docstring": null,
        "dependencies": []
      },
      {
        "name": "discovery_agent",
        "signature": {
          "args": [
            {
              "name": "MockDiscoveryServiceCls",
              "type": null
            },
            {
              "name": "app_config_adk",
              "type": null
            },
            {
              "name": "mock_parent_logger",
              "type": null
            },
            {
              "name": "output_queue",
              "type": null
            },
            {
              "name": "mock_discovery_service",
              "type": null
            }
          ],
          "return_type": null
        },
        "docstring": null,
        "dependencies": []
      }
    ],
    "tests/test_config.py": [
      {
        "name": "test_config_from_env",
        "signature": {
          "args": [
            {
              "name": "monkeypatch",
              "type": null
            }
          ],
          "return_type": null
        },
        "docstring": "Test loading configuration from environment variables.",
        "dependencies": []
      },
      {
        "name": "test_config_defaults",
        "signature": {
          "args": [],
          "return_type": null
        },
        "docstring": "Test default configuration values for new and existing fields.",
        "dependencies": []
      },
      {
        "name": "test_config_from_file",
        "signature": {
          "args": [
            {
              "name": "tmp_path",
              "type": null
            }
          ],
          "return_type": null
        },
        "docstring": "Test loading configuration from a JSON file.",
        "dependencies": [
          "json"
        ]
      },
      {
        "name": "test_partial_config_from_file",
        "signature": {
          "args": [
            {
              "name": "tmp_path",
              "type": null
            }
          ],
          "return_type": null
        },
        "docstring": "Test loading partial configuration from a file, defaults should apply.",
        "dependencies": [
          "json"
        ]
      }
    ],
    "tests/test_discovery_service.py": [
      {
        "name": "app_config_mdns_enabled",
        "signature": {
          "args": [],
          "return_type": null
        },
        "docstring": null,
        "dependencies": []
      },
      {
        "name": "discovery_service",
        "signature": {
          "args": [
            {
              "name": "app_config_mdns_enabled",
              "type": null
            }
          ],
          "return_type": null
        },
        "docstring": null,
        "dependencies": []
      },
      {
        "name": "MockAsyncServiceInfo",
        "signature": {
          "args": [],
          "return_type": null
        },
        "docstring": "Mocks zeroconf.asyncio.AsyncServiceInfo.",
        "dependencies": []
      },
      {
        "name": "__init__",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": "type_",
              "type": "str"
            },
            {
              "name": "name",
              "type": "str"
            }
          ],
          "return_type": null
        },
        "docstring": null,
        "dependencies": []
      },
      {
        "name": "parsed_addresses",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": "version",
              "type": null
            }
          ],
          "return_type": "List[str]"
        },
        "docstring": null,
        "dependencies": []
      },
      {
        "name": "parsed_addresses_by_version",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": "version",
              "type": "int"
            }
          ],
          "return_type": "List[str]"
        },
        "docstring": null,
        "dependencies": []
      },
      {
        "name": "MockAsyncServiceBrowser",
        "signature": {
          "args": [],
          "return_type": null
        },
        "docstring": "Mocks zeroconf.asyncio.AsyncServiceBrowser.",
        "dependencies": []
      },
      {
        "name": "__init__",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": "aiozc_zeroconf",
              "type": null
            },
            {
              "name": "service_types",
              "type": null
            },
            {
              "name": "handlers",
              "type": null
            }
          ],
          "return_type": null
        },
        "docstring": null,
        "dependencies": []
      },
      {
        "name": "MockAsyncZeroconf",
        "signature": {
          "args": [],
          "return_type": null
        },
        "docstring": "Mocks zeroconf.asyncio.AsyncZeroconf.",
        "dependencies": []
      },
      {
        "name": "__init__",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": null
        },
        "docstring": null,
        "dependencies": []
      }
    ],
    "tests/test_discovery_timeout.py": [
      {
        "name": "config",
        "signature": {
          "args": [],
          "return_type": null
        },
        "docstring": "Create a test configuration.",
        "dependencies": []
      }
    ],
    "tests/test_environment.py": [
      {
        "name": "test_python_version",
        "signature": {
          "args": [],
          "return_type": null
        },
        "docstring": "Ensure we're running Python 3.12+.",
        "dependencies": []
      },
      {
        "name": "test_project_structure",
        "signature": {
          "args": [],
          "return_type": null
        },
        "docstring": "Verify basic project structure.",
        "dependencies": []
      },
      {
        "name": "test_development_tools",
        "signature": {
          "args": [],
          "return_type": null
        },
        "docstring": "Verify development tools are installed.",
        "dependencies": [
          "ruff",
          "mypy",
          "pytest",
          "black"
        ]
      }
    ],
    "tests/test_http_client_timeout.py": [
      {
        "name": "config",
        "signature": {
          "args": [],
          "return_type": null
        },
        "docstring": "Create a test configuration.",
        "dependencies": []
      },
      {
        "name": "service_record",
        "signature": {
          "args": [],
          "return_type": null
        },
        "docstring": "Create a test service record.",
        "dependencies": []
      }
    ],
    "tests/test_http_mcp_client.py": [
      {
        "name": "app_config",
        "signature": {
          "args": [],
          "return_type": null
        },
        "docstring": null,
        "dependencies": []
      },
      {
        "name": "service_record",
        "signature": {
          "args": [],
          "return_type": null
        },
        "docstring": null,
        "dependencies": []
      },
      {
        "name": "mock_aiohttp_session_post",
        "signature": {
          "args": [],
          "return_type": null
        },
        "docstring": "Fixture to provide a mock for aiohttp.ClientSession.post method.",
        "dependencies": []
      }
    ],
    "tests/test_models.py": [
      {
        "name": "test_oauth2token_is_expired",
        "signature": {
          "args": [],
          "return_type": null
        },
        "docstring": "Test OAuth2Token.is_expired property.",
        "dependencies": []
      },
      {
        "name": "test_pkce_challenge_validation",
        "signature": {
          "args": [],
          "return_type": null
        },
        "docstring": "Test PKCEChallenge model validation (though it's mostly for data holding).",
        "dependencies": []
      },
      {
        "name": "test_mcp_service_record_creation",
        "signature": {
          "args": [],
          "return_type": null
        },
        "docstring": "Test basic creation and HttpUrl validation for MCPServiceRecord.",
        "dependencies": []
      },
      {
        "name": "test_mcp_tool_creation",
        "signature": {
          "args": [],
          "return_type": null
        },
        "docstring": "Test MCPTool creation with required schema fields.",
        "dependencies": []
      },
      {
        "name": "test_kagent_tool_creation",
        "signature": {
          "args": [],
          "return_type": null
        },
        "docstring": "Test KagentTool creation with nested models.",
        "dependencies": []
      },
      {
        "name": "test_kagent_crd_schema_extra_fields",
        "signature": {
          "args": [],
          "return_type": null
        },
        "docstring": "Test KagentCRDSchema allows extra fields (as JSON schema can be flexible).",
        "dependencies": []
      },
      {
        "name": "test_enum_usage_in_models",
        "signature": {
          "args": [],
          "return_type": null
        },
        "docstring": "Test that enums are correctly used and validated in models.",
        "dependencies": []
      },
      {
        "name": "test_mcp_capability_type",
        "signature": {
          "args": [],
          "return_type": null
        },
        "docstring": null,
        "dependencies": []
      },
      {
        "name": "test_model_field_defaults",
        "signature": {
          "args": [],
          "return_type": null
        },
        "docstring": "Test default values for various model fields.",
        "dependencies": []
      },
      {
        "name": "test_validation_result",
        "signature": {
          "args": [],
          "return_type": null
        },
        "docstring": null,
        "dependencies": []
      }
    ],
    "tests/test_oauth_client.py": [
      {
        "name": "app_config",
        "signature": {
          "args": [],
          "return_type": null
        },
        "docstring": null,
        "dependencies": []
      },
      {
        "name": "oauth_client_config_data",
        "signature": {
          "args": [],
          "return_type": null
        },
        "docstring": null,
        "dependencies": []
      },
      {
        "name": "oauth_client",
        "signature": {
          "args": [
            {
              "name": "oauth_client_config_data",
              "type": null
            },
            {
              "name": "app_config",
              "type": null
            }
          ],
          "return_type": null
        },
        "docstring": null,
        "dependencies": []
      },
      {
        "name": "test_parse_token_response_success",
        "signature": {
          "args": [
            {
              "name": "oauth_client",
              "type": null
            }
          ],
          "return_type": null
        },
        "docstring": "Test _parse_token_response helper method for successful case.",
        "dependencies": []
      },
      {
        "name": "test_parse_token_response_invalid_data",
        "signature": {
          "args": [
            {
              "name": "oauth_client",
              "type": null
            }
          ],
          "return_type": null
        },
        "docstring": "Test _parse_token_response helper method with invalid data.",
        "dependencies": []
      }
    ],
    "tests/test_pkce.py": [
      {
        "name": "test_generate_pkce_s256",
        "signature": {
          "args": [],
          "return_type": null
        },
        "docstring": "Test S256 PKCE challenge generation.",
        "dependencies": []
      },
      {
        "name": "test_generate_pkce_plain",
        "signature": {
          "args": [],
          "return_type": null
        },
        "docstring": "Test 'plain' PKCE challenge generation.",
        "dependencies": []
      },
      {
        "name": "test_generate_pkce_unsupported_method",
        "signature": {
          "args": [],
          "return_type": null
        },
        "docstring": "Test error handling for unsupported challenge methods.",
        "dependencies": []
      },
      {
        "name": "test_pkce_verifier_length_generation",
        "signature": {
          "args": [],
          "return_type": null
        },
        "docstring": "Test that verifiers of different valid lengths can be implicitly generated by the model if not the function.",
        "dependencies": []
      }
    ],
    "tests/test_pkce_challenge.py": [
      {
        "name": "test_valid_code_verifier_characters",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": null
        },
        "docstring": "Test that valid code verifier characters are accepted.",
        "dependencies": []
      },
      {
        "name": "test_invalid_code_verifier_with_spaces",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": null
        },
        "docstring": "Test that code verifier with spaces raises ValidationError.",
        "dependencies": []
      },
      {
        "name": "test_invalid_code_verifier_with_unicode_non_ascii",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": null
        },
        "docstring": "Test that code verifier with Unicode non-ASCII characters raises ValidationError.",
        "dependencies": []
      },
      {
        "name": "test_invalid_code_verifier_with_forbidden_symbols",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": null
        },
        "docstring": "Test that code verifier with forbidden symbols raises ValidationError.",
        "dependencies": []
      },
      {
        "name": "test_invalid_code_verifier_mixed_invalid_characters",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": null
        },
        "docstring": "Test code verifier with mixed invalid characters.",
        "dependencies": []
      },
      {
        "name": "test_valid_code_challenge_characters",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": null
        },
        "docstring": "Test that code challenge validation doesn't produce false positives.",
        "dependencies": []
      },
      {
        "name": "test_length_validation_still_works",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": null
        },
        "docstring": "Test that length validation still works alongside character validation.",
        "dependencies": []
      },
      {
        "name": "test_edge_cases",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": null
        },
        "docstring": "Test edge cases for character validation.",
        "dependencies": []
      }
    ],
    "tests/test_schema_converter_service.py": [
      {
        "name": "app_config",
        "signature": {
          "args": [],
          "return_type": null
        },
        "docstring": null,
        "dependencies": []
      },
      {
        "name": "converter_service",
        "signature": {
          "args": [
            {
              "name": "app_config",
              "type": null
            }
          ],
          "return_type": null
        },
        "docstring": null,
        "dependencies": []
      },
      {
        "name": "sample_mcp_tool",
        "signature": {
          "args": [],
          "return_type": null
        },
        "docstring": null,
        "dependencies": []
      },
      {
        "name": "sample_server_info",
        "signature": {
          "args": [],
          "return_type": null
        },
        "docstring": null,
        "dependencies": []
      },
      {
        "name": "test_sanitize_k8s_name",
        "signature": {
          "args": [
            {
              "name": "converter_service",
              "type": "SchemaConverterService"
            }
          ],
          "return_type": null
        },
        "docstring": null,
        "dependencies": []
      },
      {
        "name": "test_to_camel_case",
        "signature": {
          "args": [
            {
              "name": "converter_service",
              "type": "SchemaConverterService"
            }
          ],
          "return_type": null
        },
        "docstring": null,
        "dependencies": []
      },
      {
        "name": "test_categorize_tool",
        "signature": {
          "args": [
            {
              "name": "converter_service",
              "type": "SchemaConverterService"
            },
            {
              "name": "sample_mcp_tool",
              "type": null
            }
          ],
          "return_type": null
        },
        "docstring": null,
        "dependencies": []
      },
      {
        "name": "test_assess_risk_level",
        "signature": {
          "args": [
            {
              "name": "converter_service",
              "type": "SchemaConverterService"
            }
          ],
          "return_type": null
        },
        "docstring": null,
        "dependencies": []
      },
      {
        "name": "test_transform_json_schema_to_k8s_crd_input_params",
        "signature": {
          "args": [
            {
              "name": "converter_service",
              "type": "SchemaConverterService"
            },
            {
              "name": "mcp_schema",
              "type": null
            },
            {
              "name": "expected_k8s_props",
              "type": null
            },
            {
              "name": "sample_mcp_tool",
              "type": null
            }
          ],
          "return_type": null
        },
        "docstring": "Test input schema transformation (must result in an object schema for parameters).",
        "dependencies": []
      },
      {
        "name": "test_transform_json_schema_to_k8s_crd_output_schema",
        "signature": {
          "args": [
            {
              "name": "converter_service",
              "type": "SchemaConverterService"
            },
            {
              "name": "sample_mcp_tool",
              "type": null
            }
          ],
          "return_type": null
        },
        "docstring": "Test output schema transformation (can be non-object).",
        "dependencies": []
      }
    ],
    "tests/test_server.py": [
      {
        "name": "test_parse_auth_method_from_string",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": null
        },
        "docstring": "Test that auth method validator correctly parses string values.",
        "dependencies": []
      },
      {
        "name": "test_parse_auth_method_invalid_string",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": null
        },
        "docstring": "Test that invalid auth method strings raise ValidationError.",
        "dependencies": []
      },
      {
        "name": "test_auth_credentials_creation_with_different_methods",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": null
        },
        "docstring": "Test creating AuthCredentials with different auth methods.",
        "dependencies": []
      },
      {
        "name": "test_validate_endpoint_valid_urls",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": null
        },
        "docstring": "Test endpoint validator accepts valid URLs.",
        "dependencies": []
      },
      {
        "name": "test_validate_endpoint_invalid_urls",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": null
        },
        "docstring": "Test endpoint validator rejects invalid URLs.",
        "dependencies": []
      },
      {
        "name": "test_server_properties",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": null
        },
        "docstring": "Test server property methods work correctly.",
        "dependencies": []
      },
      {
        "name": "test_server_authentication_properties",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": null
        },
        "docstring": "Test authentication-related properties.",
        "dependencies": []
      },
      {
        "name": "test_server_status_update",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": null
        },
        "docstring": "Test server status update functionality.",
        "dependencies": []
      },
      {
        "name": "test_server_security_assessment",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": null
        },
        "docstring": "Test security assessment functionality.",
        "dependencies": []
      },
      {
        "name": "test_server_capabilities_and_metadata",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": null
        },
        "docstring": "Test server capabilities and metadata functionality.",
        "dependencies": []
      },
      {
        "name": "test_server_dict_conversion",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": null
        },
        "docstring": "Test server dictionary conversion methods.",
        "dependencies": []
      },
      {
        "name": "test_default_capabilities",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": null
        },
        "docstring": "Test default values for ServerCapabilities.",
        "dependencies": []
      },
      {
        "name": "test_custom_capabilities",
        "signature": {
          "args": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": null
        },
        "docstring": "Test creating ServerCapabilities with custom values.",
        "dependencies": []
      }
    ],
    "tests/test_token_manager.py": [
      {
        "name": "app_config",
        "signature": {
          "args": [],
          "return_type": null
        },
        "docstring": null,
        "dependencies": []
      },
      {
        "name": "mock_token_storage",
        "signature": {
          "args": [],
          "return_type": null
        },
        "docstring": null,
        "dependencies": []
      },
      {
        "name": "token_manager",
        "signature": {
          "args": [
            {
              "name": "app_config",
              "type": null
            },
            {
              "name": "mock_token_storage",
              "type": null
            }
          ],
          "return_type": null
        },
        "docstring": null,
        "dependencies": []
      },
      {
        "name": "sample_server_info",
        "signature": {
          "args": [],
          "return_type": null
        },
        "docstring": null,
        "dependencies": []
      }
    ],
    "tests/test_token_storage.py": [
      {
        "name": "auth_config_keyring",
        "signature": {
          "args": [],
          "return_type": null
        },
        "docstring": null,
        "dependencies": []
      },
      {
        "name": "mock_keyring_module",
        "signature": {
          "args": [],
          "return_type": null
        },
        "docstring": null,
        "dependencies": []
      },
      {
        "name": "set_password_mock",
        "signature": {
          "args": [
            {
              "name": "service",
              "type": null
            },
            {
              "name": "username",
              "type": null
            },
            {
              "name": "password",
              "type": null
            }
          ],
          "return_type": null
        },
        "docstring": null,
        "dependencies": []
      },
      {
        "name": "get_password_mock",
        "signature": {
          "args": [
            {
              "name": "service",
              "type": null
            },
            {
              "name": "username",
              "type": null
            }
          ],
          "return_type": null
        },
        "docstring": null,
        "dependencies": []
      },
      {
        "name": "delete_password_mock",
        "signature": {
          "args": [
            {
              "name": "service",
              "type": null
            },
            {
              "name": "username",
              "type": null
            }
          ],
          "return_type": null
        },
        "docstring": null,
        "dependencies": []
      },
      {
        "name": "test_get_token_storage_factory",
        "signature": {
          "args": [
            {
              "name": "auth_config_keyring",
              "type": null
            }
          ],
          "return_type": null
        },
        "docstring": "Test the get_token_storage factory function.",
        "dependencies": []
      }
    ],
    "validator_tests.py": [
      {
        "name": "test_auth_credentials_validator",
        "signature": {
          "args": [],
          "return_type": null
        },
        "docstring": "Test AuthCredentials field validator.",
        "dependencies": []
      },
      {
        "name": "test_mcp_server_validator",
        "signature": {
          "args": [],
          "return_type": null
        },
        "docstring": "Test MCPServer field validator.",
        "dependencies": []
      },
      {
        "name": "test_field_validator_class_method_signatures",
        "signature": {
          "args": [],
          "return_type": null
        },
        "docstring": "Test that validators use correct @classmethod and cls parameter.",
        "dependencies": []
      },
      {
        "name": "test_model_functionality",
        "signature": {
          "args": [],
          "return_type": null
        },
        "docstring": "Test overall model functionality with validators.",
        "dependencies": []
      },
      {
        "name": "main",
        "signature": {
          "args": [],
          "return_type": null
        },
        "docstring": "Run all validator tests.",
        "dependencies": []
      }
    ]
  }
}